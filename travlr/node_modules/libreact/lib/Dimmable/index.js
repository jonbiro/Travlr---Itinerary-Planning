"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var util_1 = require("../util");
var Dimmer_1 = require("../Dimmer");
var onlyTextNodes = function (children) {
    for (var i = 0; i < children.length; i++) {
        if (typeof children[i] === 'object') {
            return false;
        }
    }
    return true;
};
var Dimmable = (function (_super) {
    tslib_1.__extends(Dimmable, _super);
    function Dimmable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dimmable.prototype.render = function () {
        var _a = this.props, children = _a.children, dim = _a.dim, blur = _a.blur, renderOverlay = _a.renderOverlay, rest = tslib_1.__rest(_a, ["children", "dim", "blur", "renderOverlay"]);
        var element = React.Children.only(children);
        var elementChildren = React.Children.toArray(element.props.children);
        var child;
        var dimmerProps = rest;
        dimmerProps.hidden = !dim;
        var childProps = null;
        if (dim) {
            childProps = {
                'aria-hidden': 'true',
                style: {
                    pointerEvents: 'none'
                }
            };
            if (blur) {
                childProps.style = {
                    filter: "blur(" + blur + "px)"
                };
            }
        }
        if ((elementChildren.length === 1) && (typeof elementChildren[0] === 'object')) {
            child = elementChildren[0];
            if (childProps) {
                if (child.props.style) {
                    childProps.style = tslib_1.__assign({}, child.props.style, childProps.style);
                    if (childProps.style.filter && child.props.style.filter) {
                        childProps.style.filter += ' ' + child.props.style.filter;
                    }
                }
                child = React.cloneElement(child, childProps);
            }
        }
        else {
            child = util_1.h.apply(void 0, [onlyTextNodes(elementChildren) ? 'span' : 'div', childProps].concat(elementChildren));
        }
        return React.cloneElement(element, {
            style: tslib_1.__assign({}, (element.props.style || {}), { position: 'relative' })
        }, child, util_1.h(Dimmer_1.Dimmer, rest, (renderOverlay || util_1.noop)(dim)));
    };
    Dimmable.defaultProps = {
        blur: 5,
    };
    return Dimmable;
}(React.Component));
exports.Dimmable = Dimmable;
//# sourceMappingURL=index.js.map