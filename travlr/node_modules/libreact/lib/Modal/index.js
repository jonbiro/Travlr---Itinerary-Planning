"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var react_universal_interface_1 = require("react-universal-interface");
var react_focus_lock_1 = tslib_1.__importDefault(require("react-focus-lock"));
var util_1 = require("../util");
var Overlay_1 = require("../Overlay");
var id = 0;
var ESC = 27;
var Modal = (function (_super) {
    tslib_1.__extends(Modal, _super);
    function Modal(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.el = null;
        _this.onElement = function (el) {
            _this.el = el;
            el.setAttribute('role', 'dialog');
            el.classList.add('dialog');
            el.setAttribute('aria-modal', 'true');
            el.setAttribute('aria-labelledby', 'dialog-title-' + _this.id);
            el.setAttribute('aria-describedby', 'dialog-descr-' + _this.id);
            var siblings = Array.from(document.body.children);
            for (var i = 0; i < siblings.length; i++) {
                var sibling = siblings[i];
                if (sibling === el) {
                    continue;
                }
                if (sibling.__libreact_lock) {
                    continue;
                }
                if (sibling.hasAttribute('aria-hidden')) {
                    continue;
                }
                var sib = sibling;
                var filter = sibling.style.getPropertyValue('filter');
                if (filter === 'none') {
                    filter = '';
                }
                sib.__libreact_lock = {
                    owner: _this,
                    inert: sib.inert,
                    pointerEvents: sibling.style.getPropertyValue('pointer-events'),
                    userSelect: sibling.style.getPropertyValue('user-select'),
                    filter: filter
                };
                sib.inert = true;
                sibling.style.setProperty('pointer-events', 'none');
                sibling.style.setProperty('user-select', 'none');
                sibling.style.setProperty('filter', (filter ? filter + ',' : '') + ("blur(" + _this.props.blur + "px)"));
                sibling.setAttribute('aria-hidden', 'true');
            }
            (_this.props.onElement || util_1.noop)(el);
        };
        _this.onKey = function (event) {
            if (event.keyCode === ESC) {
                (_this.props.onEsc || util_1.noop)(event);
            }
        };
        _this.id = id++;
        _this.state = {
            close: function () { return (_this.props.onClose || util_1.noop)(); },
            idTitle: 'dialog-title-' + _this.id,
            idDescription: 'dialog-descr-' + _this.id
        };
        _this.activeEl = util_1.isClient ? document.activeElement : null;
        return _this;
    }
    Modal.prototype.componentDidMount = function () {
        util_1.on(document, 'keydown', this.onKey);
    };
    Modal.prototype.componentWillUnmount = function () {
        util_1.off(document, 'keydown', this.onKey);
        var siblings = Array.from(document.body.children);
        for (var i = 0; i < siblings.length; i++) {
            var sibling = siblings[i];
            var sib = sibling;
            if (sibling === this.el) {
                continue;
            }
            if (!sib.__libreact_lock) {
                continue;
            }
            if (sib.__libreact_lock.owner !== this) {
                continue;
            }
            var lock = sib.__libreact_lock;
            sib.inert = lock.inert;
            sibling.style.setProperty('pointer-events', lock.pointerEvents);
            sibling.style.setProperty('user-select', lock.userSelect);
            sibling.style.setProperty('filter', lock.filter || 'none');
            sibling.removeAttribute('aria-hidden');
            delete sib.__libreact_lock;
        }
        if (this.activeEl && this.activeEl.focus) {
            this.activeEl.focus();
        }
    };
    Modal.prototype.render = function () {
        var _a = this.props, color = _a.color, dontLockFocus = _a.dontLockFocus, time = _a.time, onClick = _a.onClick;
        var element = react_universal_interface_1.render(this.props, this.state);
        if (!dontLockFocus) {
            element = util_1.h(react_focus_lock_1.default, null, element);
        }
        return util_1.h(Overlay_1.Overlay, {
            color: color,
            time: time,
            onClick: onClick,
            onElement: this.onElement,
        }, element);
    };
    Modal.defaultProps = {
        blur: 5
    };
    return Modal;
}(react_1.Component));
exports.Modal = Modal;
//# sourceMappingURL=index.js.map