"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var Portal_1 = require("../Portal");
var util_1 = require("../util");
var nano_1 = require("../nano");
var classNameBodyNoScroll = nano_1.rule({
    overflow: 'hidden',
}).trim();
var Overlay = (function (_super) {
    tslib_1.__extends(Overlay, _super);
    function Overlay() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.el = null;
        _this.onElement = function (el) {
            var style = el.style;
            _this.el = el;
            style.zIndex = 2147483647;
            style.position = 'fixed';
            style.width = '100%';
            style.height = '100%';
            style.top = 0;
            style.left = 0;
            style.right = 0;
            style.bottom = 0;
            style.background = _this.props.color;
            style.transition = _this.props.time + 'ms opacity';
            style.opacity = 0;
            style.display = 'flex';
            style.alignItems = 'center';
            style.justifyContent = 'center';
            setTimeout(function () {
                style.opacity = 1;
            }, 35);
            util_1.on(el, 'click', _this.onClick);
            (_this.props.onElement || util_1.noop)(el);
        };
        _this.onClick = function (event) {
            if (event.target === _this.el) {
                (_this.props.onClick || util_1.noop)(event);
            }
        };
        return _this;
    }
    Overlay.prototype.componentDidMount = function () {
        document.body.classList.add(classNameBodyNoScroll);
    };
    Overlay.prototype.componentWillUnmount = function () {
        util_1.off(this.el, 'click', this.onClick);
        document.body.classList.remove(classNameBodyNoScroll);
    };
    Overlay.prototype.render = function () {
        return util_1.h(Portal_1.Portal, { onElement: this.onElement }, this.props.children);
    };
    Overlay.defaultProps = {
        color: 'rgba(0,0,0,0.5)',
        time: 300,
    };
    return Overlay;
}(react_1.Component));
exports.Overlay = Overlay;
//# sourceMappingURL=index.js.map