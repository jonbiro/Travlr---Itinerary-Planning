"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var util_1 = require("../util");
var faccToHoc_1 = tslib_1.__importDefault(require("../util/faccToHoc"));
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var BatterySensor = (function (_super) {
    tslib_1.__extends(BatterySensor, _super);
    function BatterySensor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onChange = function () {
            var battery = _this.battery;
            var charging = battery.charging, level = battery.level, chargingTime = battery.chargingTime, dischargingTime = battery.dischargingTime;
            _this.setState({
                charging: charging,
                level: level,
                chargingTime: chargingTime,
                dischargingTime: dischargingTime
            });
        };
        return _this;
    }
    BatterySensor.prototype.componentDidMount = function () {
        var _this = this;
        this.mounted = true;
        navigator.getBattery().then(function (battery) {
            if (_this.mounted) {
                _this.battery = battery;
                _this.onBattery();
            }
        });
    };
    BatterySensor.prototype.componentWillUnmount = function () {
        this.mounted = false;
        var _a = this, battery = _a.battery, onChange = _a.onChange;
        if (battery) {
            util_1.off(battery, 'chargingchange', onChange);
            util_1.off(battery, 'levelchange', onChange);
            util_1.off(battery, 'chargingtimechange', onChange);
            util_1.off(battery, 'dischargingtimechange', onChange);
        }
    };
    BatterySensor.prototype.onBattery = function () {
        var _a = this, battery = _a.battery, onChange = _a.onChange;
        this.onChange();
        util_1.on(battery, 'chargingchange', onChange);
        util_1.on(battery, 'levelchange', onChange);
        util_1.on(battery, 'chargingtimechange', onChange);
        util_1.on(battery, 'dischargingtimechange', onChange);
    };
    BatterySensor.prototype.render = function () {
        return renderProp_1.default(this.props, this.state);
    };
    return BatterySensor;
}(react_1.Component));
exports.BatterySensor = BatterySensor;
exports.withBattery = faccToHoc_1.default(BatterySensor, 'battery');
//# sourceMappingURL=index.js.map