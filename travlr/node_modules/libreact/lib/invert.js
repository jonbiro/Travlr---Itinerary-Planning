"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var util_1 = require("./util");
var renderProp_1 = tslib_1.__importDefault(require("./util/renderProp"));
var defaultWrapper = function (element) { return element; };
exports.invert = function (tag) {
    var _a;
    var Inverted = (_a = (function (_super) {
            tslib_1.__extends(Inverted, _super);
            function Inverted() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.el = null;
                _this.ref = function (el) {
                    _this.el = el;
                };
                return _this;
            }
            Inverted.prototype.componentDidMount = function () {
                (this.props.onMount || util_1.noop)(this.el, this);
                this.forceUpdate();
            };
            Inverted.prototype.componentWillUnmount = function () {
                (this.props.onUnmount || util_1.noop)(this.el, this);
                this.el = null;
            };
            Inverted.prototype.event = function (handler) {
                var _this = this;
                return function (event) {
                    handler(event, _this.el, _this);
                    _this.forceUpdate();
                };
            };
            Inverted.prototype.render = function () {
                var _a = this.props, children = _a.children, render = _a.render, wrapper = _a.wrapper, tagProp = _a.tag, onMount = _a.onMount, onUnmount = _a.onUnmount, rest = tslib_1.__rest(_a, ["children", "render", "wrapper", "tag", "onMount", "onUnmount"]);
                var props = {
                    ref: this.ref
                };
                for (var name_1 in rest) {
                    var value = rest[name_1];
                    if ((name_1[0] === 'o') && (name_1[1] === 'n') && (typeof value === 'function')) {
                        props[name_1] = this.event(value);
                    }
                    else {
                        props[name_1] = value;
                    }
                }
                var element = util_1.h(tagProp || tag, props, renderProp_1.default(this.props, this));
                return wrapper(element, this);
            };
            return Inverted;
        }(React.Component)),
        _a.defaultProps = {
            wrapper: defaultWrapper
        },
        _a);
    return Inverted;
};
exports.Inverted = exports.invert();
//# sourceMappingURL=invert.js.map