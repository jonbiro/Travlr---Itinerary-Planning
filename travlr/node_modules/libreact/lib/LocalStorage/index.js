"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var local_storage_1 = require("./local-storage");
var throttle_debounce_1 = require("throttle-debounce");
var LocalStorage = (function (_super) {
    tslib_1.__extends(LocalStorage, _super);
    function LocalStorage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.put = throttle_debounce_1.debounce(_this.props.debounce, function (rawData) {
            var _a = _this.props, name = _a.name, data = _a.data;
            try {
                if (!rawData) {
                    rawData = JSON.stringify(data);
                }
                local_storage_1.set(name, rawData);
            }
            catch (_b) { }
        });
        return _this;
    }
    LocalStorage.prototype.componentDidMount = function () {
        var _a = this.props, name = _a.name, onMount = _a.onMount;
        if (onMount) {
            var json = '';
            try {
                json = local_storage_1.get(name);
            }
            catch (_b) {
                json = 'null';
            }
            if (typeof json === 'string') {
                try {
                    var data = JSON.parse(json);
                    onMount(data);
                }
                catch (_c) { }
            }
        }
        else {
            this.put();
        }
    };
    LocalStorage.prototype.componentDidUpdate = function (props) {
        if (props.name !== this.props.name) {
            this.remove();
            this.put();
        }
        else {
            try {
                var newJson = JSON.stringify(this.props.data);
                if (JSON.stringify(props.data) !== newJson) {
                    this.put(newJson);
                }
            }
            catch (_a) { }
        }
    };
    LocalStorage.prototype.componentWillUnmount = function () {
        this.remove();
    };
    LocalStorage.prototype.remove = function (name) {
        if (name === void 0) { name = this.props.name; }
        if (!this.props.persist) {
            try {
                local_storage_1.del(name);
            }
            catch (_a) { }
        }
    };
    LocalStorage.prototype.render = function () {
        return null;
    };
    LocalStorage.defaultProps = {
        debounce: 200
    };
    return LocalStorage;
}(react_1.Component));
exports.LocalStorage = LocalStorage;
//# sourceMappingURL=index.js.map