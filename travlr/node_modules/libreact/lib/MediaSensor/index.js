"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var util_1 = require("../util");
var faccToHoc_1 = tslib_1.__importDefault(require("../util/faccToHoc"));
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var MediaSensor = (function (_super) {
    tslib_1.__extends(MediaSensor, _super);
    function MediaSensor(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.mounted = false;
        _this.onMediaChange = function (mediaQueryList) {
            if (!_this.mounted) {
                return;
            }
            _this.setState({
                matches: !!mediaQueryList.matches
            });
        };
        if (util_1.isClient) {
            _this.updateQuery();
            _this.state = {
                matches: !!_this.mql.matches
            };
        }
        else {
            _this.state = {
                matches: props.matches || false
            };
        }
        return _this;
    }
    MediaSensor.prototype.componentDidMount = function () {
        this.mounted = true;
    };
    MediaSensor.prototype.componentDidUpdate = function (props) {
        if (props.query !== this.props.query) {
            this.updateQuery();
        }
    };
    MediaSensor.prototype.componentWillUnmount = function () {
        this.mounted = false;
        this.removeListener();
    };
    MediaSensor.prototype.updateQuery = function () {
        this.removeListener();
        if (typeof window !== 'object') {
            return;
        }
        var query = this.props.query;
        this.mql = window.matchMedia(query);
        var newState = {
            matches: !!this.mql.matches
        };
        if (this.mounted) {
            this.setState(newState);
        }
        else {
            this.state = newState;
        }
        this.mql.addListener(this.onMediaChange);
    };
    MediaSensor.prototype.removeListener = function () {
        if (this.mql) {
            this.mql.removeListener(this.onMediaChange);
        }
    };
    MediaSensor.prototype.render = function () {
        return renderProp_1.default(this.props, this.state);
    };
    return MediaSensor;
}(react_1.Component));
exports.MediaSensor = MediaSensor;
exports.withMedia = faccToHoc_1.default(MediaSensor, 'media');
//# sourceMappingURL=index.js.map