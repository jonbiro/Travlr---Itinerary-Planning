"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var util_1 = require("../util");
var go_1 = tslib_1.__importDefault(require("../route/go"));
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var isModifiedEvent = function (event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
};
var Link = (function (_super) {
    tslib_1.__extends(Link, _super);
    function Link() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.el = null;
        _this.target = '';
        _this.ref = function (originalRef) { return function (el) {
            _this.el = el;
            (originalRef || util_1.noop)(el);
        }; };
        _this.onClick = function (originalClick) { return function (event) {
            (originalClick || util_1.noop)(event);
            var _a = _this.props, onGo = _a.onGo, replace = _a.replace, to = _a.to, state = _a.state;
            if (!event.defaultPrevented &&
                event.button === 0 &&
                !_this.target &&
                !isModifiedEvent(event)) {
                event.preventDefault();
                onGo(to, {
                    replace: replace,
                    state: typeof state === 'function' ? state(_this.props) : state
                });
            }
        }; };
        return _this;
    }
    Link.prototype.render = function () {
        var _a = this.props, bond = _a.bond, replace = _a.replace, state = _a.state, to = _a.to, a = _a.a, isActive = _a.isActive, rest = tslib_1.__rest(_a, ["bond", "replace", "state", "to", "a", "isActive"]);
        var renderPropState = {
            isActive: isActive,
            go: go_1.default,
            to: to
        };
        if (bond) {
            if (typeof bond !== 'string') {
                bond = 'bond';
            }
            renderPropState[bond] = {
                onClick: this.onClick()
            };
        }
        var element = renderProp_1.default(this.props, renderPropState);
        if (!element) {
            return null;
        }
        if (a || (typeof element !== 'object')) {
            element = util_1.h('a', rest, element);
        }
        var props = {
            ref: this.ref(element.ref)
        };
        if (!bond) {
            props.onClick = this.onClick(element.props.originalClick);
        }
        this.target = '';
        if (element.type === 'a') {
            this.target = element.props.target;
            props.href = to;
        }
        return React.cloneElement(element, props);
    };
    Link.defaultProps = {
        onGo: go_1.default
    };
    return Link;
}(React.Component));
exports.default = Link;
//# sourceMappingURL=Link.js.map