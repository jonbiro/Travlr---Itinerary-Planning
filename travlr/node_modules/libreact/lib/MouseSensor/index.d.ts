import { Component } from 'react';
export interface IMouseSensorProps {
    bond?: string | boolean;
    children?: (state: IMouseSensorState) => React.ReactElement<any>;
    render?: (state: IMouseSensorState) => React.ReactElement<any>;
    whenHovered?: boolean;
    onMouseMove?: (state: IMouseSensorState) => void;
}
export interface IMouseSensorState {
    docX: number;
    docY: number;
    posX: number;
    posY: number;
    elH: number;
    elW: number;
    elX: number;
    elY: number;
}
export declare class MouseSensor extends Component<IMouseSensorProps, IMouseSensorState> {
    state: IMouseSensorState;
    el: HTMLElement;
    frame: any;
    ref: (originalRef?: any) => (el: any) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    bindEvents(): void;
    unbindEvents(): void;
    onDocMouseMove: (event: any) => void;
    onMouseEnter: (originalOnMouseMove?: any) => (event: any) => void;
    onMouseLeave: (originalOnMouseMove?: any) => (event: any) => void;
    render(): any;
}
export declare const withMouse: any;
