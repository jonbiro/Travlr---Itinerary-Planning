"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var util_1 = require("../util");
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var faccToHoc_1 = tslib_1.__importDefault(require("../util/faccToHoc"));
var MouseSensor = (function (_super) {
    tslib_1.__extends(MouseSensor, _super);
    function MouseSensor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            docX: 0,
            docY: 0,
            posX: 0,
            posY: 0,
            elH: 0,
            elW: 0,
            elX: 0,
            elY: 0
        };
        _this.el = null;
        _this.frame = null;
        _this.ref = function (originalRef) { return function (el) {
            _this.el = el;
            (originalRef || util_1.noop)(el);
        }; };
        _this.onDocMouseMove = function (event) {
            var el = _this.el;
            if (!el) {
                return;
            }
            cancelAnimationFrame(_this.frame);
            _this.frame = requestAnimationFrame(function () {
                var _a = el.getBoundingClientRect(), left = _a.left, top = _a.top;
                var posX = left + window.scrollX;
                var posY = top + window.scrollY;
                var state = {
                    docX: event.pageX,
                    docY: event.pageY,
                    posX: posX,
                    posY: posY,
                    elH: el.offsetHeight,
                    elW: el.offsetWidth,
                    elX: event.pageX - posX,
                    elY: event.pageY - posY
                };
                _this.setState(state);
                (_this.props.onMouseMove || util_1.noop)(state);
            });
        };
        _this.onMouseEnter = function (originalOnMouseMove) { return function (event) {
            if (_this.props.whenHovered) {
                _this.bindEvents();
            }
            (originalOnMouseMove || util_1.noop)(event);
        }; };
        _this.onMouseLeave = function (originalOnMouseMove) { return function (event) {
            if (_this.props.whenHovered) {
                _this.unbindEvents();
            }
            (originalOnMouseMove || util_1.noop)(event);
        }; };
        return _this;
    }
    MouseSensor.prototype.componentDidMount = function () {
        if (!this.props.whenHovered) {
            this.bindEvents();
        }
    };
    MouseSensor.prototype.componentWillUnmount = function () {
        this.unbindEvents();
    };
    MouseSensor.prototype.bindEvents = function () {
        document.addEventListener('mousemove', this.onDocMouseMove);
    };
    MouseSensor.prototype.unbindEvents = function () {
        document.removeEventListener('mousemove', this.onDocMouseMove);
    };
    MouseSensor.prototype.render = function () {
        var _a;
        var bond = this.props.bond;
        if (bond) {
            if (typeof bond === 'boolean') {
                bond = 'bond';
            }
            var bondObject = {
                ref: this.ref()
            };
            if (!this.props.whenHovered) {
                bondObject.onMouseEnter = this.onMouseEnter();
                bondObject.onMouseLeave = this.onMouseLeave();
            }
            return renderProp_1.default(this.props, tslib_1.__assign({}, this.state, (_a = {}, _a[bond] = bondObject, _a)));
        }
        else {
            var element = renderProp_1.default(this.props, this.state);
            var newProps = tslib_1.__assign({}, element.props, { ref: this.ref(element.ref) });
            if (!this.props.whenHovered) {
                var _b = element.props, onMouseEnter = _b.onMouseEnter, onMouseLeave = _b.onMouseLeave;
                newProps.onMouseEnter = this.onMouseEnter(onMouseEnter);
                newProps.onMouseLeave = this.onMouseLeave(onMouseLeave);
            }
            return react_1.cloneElement(element, newProps);
        }
    };
    return MouseSensor;
}(react_1.Component));
exports.MouseSensor = MouseSensor;
var MouseSensorWithBond = function (props) { return util_1.h(MouseSensor, tslib_1.__assign({ bond: true }, props)); };
exports.withMouse = faccToHoc_1.default(MouseSensorWithBond, 'mouse');
//# sourceMappingURL=index.js.map