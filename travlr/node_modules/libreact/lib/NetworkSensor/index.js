"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var util_1 = require("../util");
var faccToHoc_1 = tslib_1.__importDefault(require("../util/faccToHoc"));
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var NetworkSensor = (function (_super) {
    tslib_1.__extends(NetworkSensor, _super);
    function NetworkSensor(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onOnline = function () {
            _this.setState({
                online: true,
                since: new Date()
            });
        };
        _this.onOffline = function () {
            _this.setState({
                online: false,
                since: new Date()
            });
        };
        _this.onNetConnChange = function () {
            _this.setState(_this.getConnState());
        };
        if (util_1.isClient) {
            _this.state = {
                online: navigator.onLine,
                since: undefined
            };
        }
        else {
            _this.state = {
                online: true,
                since: undefined
            };
        }
        _this.state = tslib_1.__assign({}, _this.state, _this.getConnState());
        return _this;
    }
    Object.defineProperty(NetworkSensor.prototype, "connection", {
        get: function () {
            if (typeof navigator !== 'object') {
                return null;
            }
            var nav = navigator;
            return nav.connection || nav.mozConnection || nav.webkitConnection;
        },
        enumerable: true,
        configurable: true
    });
    NetworkSensor.prototype.componentDidMount = function () {
        util_1.on(window, 'online', this.onOnline);
        util_1.on(window, 'offline', this.onOffline);
        var connection = this.connection;
        if (connection) {
            util_1.on(connection, 'change', this.onNetConnChange);
        }
    };
    NetworkSensor.prototype.componentWillUnmount = function () {
        util_1.off(window, 'online', this.onOnline);
        util_1.off(window, 'offline', this.onOffline);
        var connection = this.connection;
        if (connection) {
            util_1.off(connection, 'change', this.onNetConnChange);
        }
    };
    NetworkSensor.prototype.getConnState = function () {
        var connection = this.connection;
        if (!connection) {
            return {};
        }
        var downlink = connection.downlink, downlinkMax = connection.downlinkMax, effectiveType = connection.effectiveType, type = connection.type, rtt = connection.rtt;
        return {
            downlink: downlink,
            downlinkMax: downlinkMax,
            effectiveType: effectiveType,
            type: type,
            rtt: rtt
        };
    };
    NetworkSensor.prototype.render = function () {
        return renderProp_1.default(this.props, this.state);
    };
    return NetworkSensor;
}(react_1.Component));
exports.NetworkSensor = NetworkSensor;
exports.withNetwork = faccToHoc_1.default(NetworkSensor, 'net');
//# sourceMappingURL=index.js.map