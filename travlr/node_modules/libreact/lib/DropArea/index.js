"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var react_universal_interface_1 = require("react-universal-interface");
var util_1 = require("../util");
var DropArea = (function (_super) {
    tslib_1.__extends(DropArea, _super);
    function DropArea() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mounted = true;
        _this.onDragOver = function (originalDragOver) { return function (event) {
            (originalDragOver || util_1.noop)(event);
            event.preventDefault();
        }; };
        _this.onDragEnter = function (originalDragEnter) { return function (event) {
            (originalDragEnter || util_1.noop)(event);
            event.preventDefault();
        }; };
        _this.onDrop = function (originalDrop) { return function (event) {
            (originalDrop || util_1.noop)(event);
            event.preventDefault();
            _this.process(event.dataTransfer, event);
        }; };
        _this.onPaste = function (originalOnPaste) { return function (event) {
            (originalOnPaste || util_1.noop)(event);
            _this.process(event.clipboardData, event);
        }; };
        return _this;
    }
    DropArea.prototype.coponentWillUnmount = function () {
        this.mounted = false;
    };
    DropArea.prototype.process = function (dataTransfer, event) {
        var _this = this;
        var uri = dataTransfer.getData('text/uri-list');
        if (uri) {
            this.props.onUri(uri, event);
            return;
        }
        if (dataTransfer.files && dataTransfer.files.length) {
            this.props.onFiles(Array.from(dataTransfer.files), event);
            return;
        }
        if (dataTransfer.items && dataTransfer.items.length) {
            dataTransfer.items[0].getAsString(function (text) {
                if (_this.mounted) {
                    _this.props.onText(text, event);
                }
            });
        }
    };
    DropArea.prototype.render = function () {
        var element = react_universal_interface_1.render(this.props, {});
        var props = element.props;
        return React.cloneElement(element, tslib_1.__assign({}, props, { onDragOver: this.onDragOver(props.onDragOver), onDragEnter: this.onDragEnter(props.onDragEnter), onDrop: this.onDrop(props.onDrop), onPaste: this.onPaste(props.onPaste) }));
    };
    DropArea.defaultProps = {
        onFiles: util_1.noop,
        onText: util_1.noop,
        onUrl: util_1.noop,
    };
    return DropArea;
}(React.Component));
exports.DropArea = DropArea;
//# sourceMappingURL=index.js.map