"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var react_universal_interface_1 = require("react-universal-interface");
var util_1 = require("../util");
var throttle_debounce_1 = require("throttle-debounce");
var equalSets = function (a, b) {
    if (a.length !== b.length) {
        return false;
    }
    a.sort();
    b.sort();
    for (var i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
};
var IdleSensor = (function (_super) {
    tslib_1.__extends(IdleSensor, _super);
    function IdleSensor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            idle: false
        };
        _this.onVisibility = function () {
            if (!document.hidden) {
                _this.onEvent();
            }
        };
        _this.onEvent = throttle_debounce_1.throttle(_this.props.throttle, false, function () {
            if (_this.state.idle) {
                _this.change(false);
            }
            clearTimeout(_this.timeout);
            _this.setTimeout();
        });
        _this.onTimeout = function () {
            if (_this.state.idle) {
                _this.change(false);
            }
            clearTimeout(_this.timeout);
            _this.setTimeout();
        };
        return _this;
    }
    IdleSensor.prototype.componentDidMount = function () {
        this.bindEvents();
        this.setTimeout();
    };
    IdleSensor.prototype.componentWillUnmount = function () {
        this.unbindEvents();
        clearTimeout(this.timeout);
    };
    IdleSensor.prototype.componentDidUpdate = function (props) {
        if (!equalSets(props.events, this.props.events)) {
            this.unbindEvents();
            this.bindEvents();
        }
    };
    IdleSensor.prototype.bindEvents = function () {
        var events = this.props.events;
        for (var i = 0; i < events.length; i++) {
            util_1.on(window, events[i], this.onEvent);
        }
        util_1.on(document, 'visibilitychange', this.onVisibility);
    };
    IdleSensor.prototype.unbindEvents = function () {
        var events = this.props.events;
        for (var i = 0; i < events.length; i++) {
            util_1.off(window, events[i], this.onEvent);
        }
        util_1.off(document, 'visibilitychange', this.onVisibility);
    };
    IdleSensor.prototype.change = function (idle) {
        (this.props.onChange || util_1.noop)(idle);
        this.setState({ idle: idle });
    };
    IdleSensor.prototype.setTimeout = function () {
        var _this = this;
        this.timeout = setTimeout(function () { return _this.change(true); }, this.props.ms);
    };
    IdleSensor.prototype.render = function () {
        return react_universal_interface_1.render(this.props, this.state);
    };
    IdleSensor.defaultProps = {
        events: ['mousemove', 'mousedown', 'resize', 'keydown', 'touchstart', 'wheel'],
        ms: 1000 * 60 * 2,
        throttle: 50
    };
    return IdleSensor;
}(react_1.Component));
exports.IdleSensor = IdleSensor;
exports.withIdle = react_universal_interface_1.createEnhancer(IdleSensor, 'idle');
//# sourceMappingURL=index.js.map