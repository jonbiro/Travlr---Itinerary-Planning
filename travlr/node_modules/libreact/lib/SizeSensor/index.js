"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var util_1 = require("../util");
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var faccToHoc_1 = tslib_1.__importStar(require("../util/faccToHoc"));
var DRAF = function (callback) { return setTimeout(callback, 35); };
var SizeSensor = (function (_super) {
    tslib_1.__extends(SizeSensor, _super);
    function SizeSensor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            width: Infinity,
            height: Infinity,
        };
        _this.ref = function (iframe) {
            _this.iframe = iframe;
        };
        _this.onObjectResize = function () {
            _this.setSize();
        };
        return _this;
    }
    SizeSensor.prototype.componentDidMount = function () {
        var _this = this;
        this.window = this.iframe.contentWindow;
        if (this.window) {
            this.onWindow(this.window);
        }
        else {
            var onLoad_1 = function () {
                _this.iframe.removeEventListener('load', onLoad_1);
                _this.window = _this.iframe.contentWindow;
                _this.onWindow(_this.window);
            };
            this.iframe.addEventListener('load', onLoad_1);
        }
    };
    SizeSensor.prototype.onWindow = function (wnd) {
        var _this = this;
        wnd.addEventListener('resize', this.onObjectResize);
        DRAF(function () {
            _this.setSize();
        });
    };
    SizeSensor.prototype.componentWillUnmount = function () {
        if (this.window) {
            this.window.removeEventListener('resize', this.onObjectResize);
        }
    };
    SizeSensor.prototype.setSize = function () {
        var size = this.iframe ?
            {
                width: this.iframe.offsetWidth,
                height: this.iframe.offsetHeight
            } :
            {
                width: null,
                height: null
            };
        this.setState(size);
        (this.props.onSize || util_1.noop)(size);
    };
    SizeSensor.prototype.render = function () {
        var element = renderProp_1.default(this.props, this.state);
        var style = element.props.style || {};
        style.position = 'relative';
        return React.cloneElement.apply(React, [element, { style: style }].concat([
            util_1.h('iframe', {
                ref: this.ref,
                style: {
                    background: 'transparent',
                    border: 'none',
                    height: '100%',
                    left: 0,
                    position: 'absolute',
                    top: 0,
                    width: '100%',
                    zIndex: -1
                }
            })
        ].concat(React.Children.toArray(element.props.children))));
    };
    return SizeSensor;
}(React.Component));
exports.SizeSensor = SizeSensor;
exports.withSize = faccToHoc_1.default(SizeSensor, 'size', faccToHoc_1.divWrapper);
//# sourceMappingURL=index.js.map