"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var context_1 = require("../context");
var util_1 = require("../util");
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var faccToHoc_1 = tslib_1.__importDefault(require("../util/faccToHoc"));
var supportsCssVariables = util_1.isClient && window.CSS && CSS.supports && CSS.supports('--a', '0');
var style;
if (supportsCssVariables) {
    style = document.documentElement.style;
}
var CssVarsProvider = (function (_super) {
    tslib_1.__extends(CssVarsProvider, _super);
    function CssVarsProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.vars = {};
        return _this;
    }
    CssVarsProvider.prototype.componentWillMount = function () {
        this.setVars(this.props.vars);
    };
    CssVarsProvider.prototype.componentWillUpdate = function (newProps) {
        var oldVars = this.props.vars;
        var newVars = newProps.vars;
        var shouldRerender = this.setVars(newVars, oldVars) || this.removeVars(oldVars, newVars);
        if (shouldRerender) {
            this.vars = tslib_1.__assign({}, this.vars);
        }
    };
    CssVarsProvider.prototype.componentWillUnmount = function () {
        this.removeVars(this.vars);
    };
    CssVarsProvider.prototype.setVars = function (vars, oldVars) {
        if (oldVars === void 0) { oldVars = {}; }
        if (!supportsCssVariables) {
            this.vars = vars;
            return true;
        }
        var shouldRerender = false;
        var ns = this.props.ns;
        for (var name_1 in vars) {
            var doUpdate = false;
            if (oldVars[name_1]) {
                if (vars[name_1] !== oldVars[name_1]) {
                    doUpdate = true;
                }
            }
            else {
                shouldRerender = true;
                doUpdate = true;
            }
            if (doUpdate) {
                var varName = "---" + ns + "libreact-" + name_1;
                this.vars[name_1] = "var(" + varName + ")";
                style.setProperty(varName, String(vars[name_1]));
            }
        }
        return shouldRerender;
    };
    CssVarsProvider.prototype.removeVars = function (oldVars, vars) {
        if (vars === void 0) { vars = {}; }
        var shouldRerender = false;
        var ns = this.props.ns;
        for (var name_2 in oldVars) {
            if (vars[name_2] === undefined) {
                var varName = "---" + ns + "libreact-" + name_2;
                delete this.vars[name_2];
                style.removeProperty(varName);
                shouldRerender = true;
            }
        }
        return shouldRerender;
    };
    CssVarsProvider.prototype.render = function () {
        return util_1.h(context_1.Provider, {
            name: 'css-vars/' + this.props.ns,
            value: this.vars
        }, this.props.children);
    };
    CssVarsProvider.defaultProps = {
        ns: ''
    };
    return CssVarsProvider;
}(react_1.PureComponent));
exports.CssVarsProvider = CssVarsProvider;
var CssVars = (function (_super) {
    tslib_1.__extends(CssVars, _super);
    function CssVars() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CssVars.prototype.render = function () {
        var _this = this;
        return util_1.h(context_1.Consumer, { name: 'css-vars/' + this.props.ns }, function (vars) {
            return renderProp_1.default(_this.props, vars);
        });
    };
    CssVars.defaultProps = {
        ns: ''
    };
    return CssVars;
}(react_1.Component));
exports.CssVars = CssVars;
exports.withCssVars = faccToHoc_1.default(CssVars, 'vars');
//# sourceMappingURL=index.js.map