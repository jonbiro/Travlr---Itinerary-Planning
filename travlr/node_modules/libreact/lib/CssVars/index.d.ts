import { PureComponent, Component } from 'react';
import { Provider, Consumer } from '../context';
export declare type TVars = {
    [name: string]: string;
};
export interface ICssVarsProviderProps {
    ns?: string;
    vars: TVars;
}
export interface ICssVarsProviderState {
}
export declare class CssVarsProvider extends PureComponent<ICssVarsProviderProps, ICssVarsProviderState> {
    static defaultProps: {
        ns: string;
    };
    vars: TVars;
    componentWillMount(): void;
    componentWillUpdate(newProps: any): void;
    componentWillUnmount(): void;
    setVars(vars: TVars, oldVars?: TVars): boolean;
    removeVars(oldVars: TVars, vars?: TVars): boolean;
    render(): import("react").ComponentElement<import("../context").IProviderProps, Provider>;
}
export interface ICssVarsProps {
    children?: any;
    render?: any;
    component?: any;
    comp?: any;
    ns?: string;
}
export interface ICssVarsState {
}
export declare class CssVars extends Component<ICssVarsProps, ICssVarsState> {
    static defaultProps: {
        ns: string;
    };
    render(): import("react").ComponentElement<Readonly<{
        children?: import("react").ReactNode;
    }> & Readonly<import("../context").IConsumerProps>, Consumer>;
}
export declare const withCssVars: any;
