"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var react_2 = require("@storybook/react");
var invert_1 = require("./invert");
var ShowDocs_1 = tslib_1.__importDefault(require("./ShowDocs"));
var Audio = invert_1.invert('audio');
var StoryInvertedUnmount = (function (_super) {
    tslib_1.__extends(StoryInvertedUnmount, _super);
    function StoryInvertedUnmount() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            show: true
        };
        return _this;
    }
    StoryInvertedUnmount.prototype.componentDidMount = function () {
        var _this = this;
        setTimeout(function () {
            _this.setState({
                show: false
            });
        }, 1000);
    };
    StoryInvertedUnmount.prototype.render = function () {
        return react_1.createElement('div', {}, this.state.show ?
            react_1.createElement(invert_1.Inverted, {
                tag: 'div',
                wrapper: function () { return react_1.createElement("b", null, "jsx"); },
                onMount: function (div) { return console.log('MOUNTED', div); },
                onUnmount: function (div) { return console.log('UNMOUNTED', div); }
            }, 'Hello world') :
            null);
    };
    return StoryInvertedUnmount;
}(react_1.Component));
react_2.storiesOf('Dummies/invert()', module)
    .add('Documentation', function () { return react_1.createElement(ShowDocs_1.default, { name: 'invert' }); })
    .add('<div>', function () { return react_1.createElement(StoryInvertedUnmount); })
    .add('<audio>', function () {
    return react_1.createElement(Audio, { src: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3', onTimeUpdate: function () { }, wrapper: function (element, comp) {
            return react_1.createElement("div", null,
                element,
                react_1.createElement("button", { onClick: function () { return comp.el.play(); } }, "Play"),
                react_1.createElement("button", { onClick: function () { return comp.el.pause(); } }, "Pause"),
                react_1.createElement("button", { onClick: function () { return comp.el.currentTime -= 5; } }, "Seek -"),
                react_1.createElement("button", { onClick: function () { return comp.el.currentTime += 5; } }, "Seek +"),
                react_1.createElement("button", { onClick: function () { return comp.el.volume -= 0.05; } }, "Volume -"),
                react_1.createElement("button", { onClick: function () { return comp.el.volume += 0.05; } }, "Volume +"),
                react_1.createElement("button", { onClick: function () { return comp.el.muted = true; } }, "Mute"),
                react_1.createElement("button", { onClick: function () { return comp.el.muted = false; } }, "Unmute"),
                react_1.createElement("pre", { style: { fontFamily: 'monospace' } }, JSON.stringify({
                    duration: comp.el && comp.el.duration,
                    time: comp.el && comp.el.currentTime,
                    volume: comp.el && comp.el.volume,
                    muted: comp.el && comp.el.muted
                }, null, 4)));
        } });
});
//# sourceMappingURL=invert.story.js.map