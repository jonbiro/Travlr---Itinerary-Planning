import { Component } from 'react';
export interface ILifecyclesProps {
    didMount?: (props: any) => void;
    shouldUpdate?: (nextProps: any, props: any) => boolean;
    getSnapshotBeforeUpdate?: (prevProps: any, props: any) => any;
    didUpdate?: (props: any, prevProps: any, snapshot: any) => void;
    willUnmount?: (props: any) => void;
    didCatch?: (error: any, info: any, props: any) => void;
    [key: string]: any;
}
export declare class Lifecycles extends Component<ILifecyclesProps, {}> {
    static defaultProps: {
        didMount: (...args: any[]) => any;
        shouldUpdate: (...args: any[]) => any;
        getSnapshotBeforeUpdate: (...args: any[]) => any;
        didUpdate: (...args: any[]) => any;
        willUnmount: (...args: any[]) => any;
        didCatch: (...args: any[]) => any;
    };
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any): boolean;
    getSnapshotBeforeUpdate(prevProps: any): any;
    componentDidUpdate(prevProps: any, prevState: any, snapshot: any): void;
    componentWillUnmount(): void;
    componentDidCatch(error: any, info: any): void;
    render(): import("react").ReactNode;
}
