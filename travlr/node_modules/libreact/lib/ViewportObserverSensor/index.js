"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var util_1 = require("../util");
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var ViewportObserverSensor = (function (_super) {
    tslib_1.__extends(ViewportObserverSensor, _super);
    function ViewportObserverSensor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mounted = false;
        _this.el = null;
        _this.observer = null;
        _this.state = {
            visible: false
        };
        _this.ref = function (originalRef) { return function (el) {
            _this.el = el;
            (originalRef || util_1.noop)(el);
        }; };
        _this.onObserve = function (entries) {
            var entry = entries[0];
            var intersectionRatio = entry.intersectionRatio;
            var _a = _this.props, threshold = _a.threshold, onChange = _a.onChange;
            var noThresholdAndTinyBitIsVisible = !!(!threshold && intersectionRatio);
            var visibleMoreOrEqualToThreshold = threshold
                ? intersectionRatio >= threshold
                : intersectionRatio > threshold;
            var state = {
                visible: noThresholdAndTinyBitIsVisible || visibleMoreOrEqualToThreshold,
            };
            _this.setState(state);
            (onChange || util_1.noop)(state);
        };
        return _this;
    }
    ViewportObserverSensor.prototype.componentDidMount = function () {
        var _a = this.props, margin = _a.margin, threshold = _a.threshold;
        this.mounted = true;
        this.observer = new IntersectionObserver(this.onObserve, {
            rootMargin: margin.map(function (val) { return val + 'px'; }).join(' '),
            threshold: threshold
        });
        this.observer.observe(this.el);
    };
    ViewportObserverSensor.prototype.componentWillUnmount = function () {
        this.mounted = false;
        this.observer.unobserve(this.el);
    };
    ViewportObserverSensor.prototype.render = function () {
        var element = renderProp_1.default(this.props, this.state);
        if (process.env.NODE_ENV !== 'production') {
            if ((typeof element !== 'object') || (typeof element.type !== 'string')) {
                throw new TypeError('<ViewportScrollSensor> accepts a single child which must be ' +
                    'a plain DOM element or a function that returns one.');
            }
        }
        return react_1.cloneElement(element, {
            ref: this.ref(element.ref)
        });
    };
    ViewportObserverSensor.defaultProps = {
        threshold: 0,
        margin: [0, 0, 0, 0]
    };
    return ViewportObserverSensor;
}(react_1.Component));
exports.ViewportObserverSensor = ViewportObserverSensor;
//# sourceMappingURL=index.js.map