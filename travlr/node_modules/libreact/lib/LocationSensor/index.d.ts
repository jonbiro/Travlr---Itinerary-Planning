import { Component } from 'react';
import { IUniversalInterfaceProps } from '../typing';
export interface ILocationSensorProps extends IUniversalInterfaceProps<ILocationSensorState> {
    onChange?: (state: ILocationSensorState) => void;
}
export interface ILocationSensorState {
    trigger: string;
    state?: any;
    length?: number;
    hash?: string;
    host?: string;
    hostname?: string;
    href?: string;
    origin?: string;
    pathname?: string;
    port?: string;
    protocol?: string;
    search?: string;
}
export declare class LocationSensor extends Component<ILocationSensorProps, ILocationSensorState> {
    state: ILocationSensorState;
    constructor(props: any, context: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    onPopstate: () => void;
    onPushstate: () => void;
    onReplacestate: () => void;
    onChange: (trigger: string) => void;
    buildState(trigger: string): {
        trigger: string;
        state: any;
        length: number;
        hash: string;
        host: string;
        hostname: string;
        href: string;
        origin: string;
        pathname: string;
        port: string;
        protocol: string;
        search: string;
    };
    render(): any;
}
export declare const withLocation: any;
