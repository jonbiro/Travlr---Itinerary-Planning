"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var util_1 = require("../util");
var faccToHoc_1 = tslib_1.__importDefault(require("../util/faccToHoc"));
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var patchHistoryMethod = function (method) {
    var original = history[method];
    history[method] = function (state) {
        var result = original.apply(this, arguments);
        var event = new Event(method.toLowerCase());
        event.state = state;
        window.dispatchEvent(event);
        return result;
    };
};
if (util_1.isClient) {
    patchHistoryMethod('pushState');
    patchHistoryMethod('replaceState');
}
var LocationSensor = (function (_super) {
    tslib_1.__extends(LocationSensor, _super);
    function LocationSensor(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onPopstate = function () {
            _this.onChange('popstate');
        };
        _this.onPushstate = function () {
            _this.onChange('pushstate');
        };
        _this.onReplacestate = function () {
            _this.onChange('replacestate');
        };
        _this.onChange = function (trigger) {
            var newState = _this.buildState(trigger);
            _this.setState(newState);
            (_this.props.onChange || util_1.noop)(newState);
        };
        if (util_1.isClient) {
            _this.state = _this.buildState('load');
        }
        else {
            _this.state = {
                trigger: 'load',
                length: 1
            };
        }
        return _this;
    }
    LocationSensor.prototype.componentDidMount = function () {
        util_1.on(window, 'popstate', this.onPopstate);
        util_1.on(window, 'pushstate', this.onPushstate);
        util_1.on(window, 'replacestate', this.onReplacestate);
    };
    LocationSensor.prototype.componentWillUnmount = function () {
        util_1.off(window, 'popstate', this.onPopstate);
        util_1.off(window, 'pushstate', this.onPushstate);
        util_1.off(window, 'replacestate', this.onReplacestate);
    };
    LocationSensor.prototype.buildState = function (trigger) {
        var state = history.state, length = history.length;
        var hash = location.hash, host = location.host, hostname = location.hostname, href = location.href, origin = location.origin, pathname = location.pathname, port = location.port, protocol = location.protocol, search = location.search;
        return {
            trigger: trigger,
            state: state,
            length: length,
            hash: hash,
            host: host,
            hostname: hostname,
            href: href,
            origin: origin,
            pathname: pathname,
            port: port,
            protocol: protocol,
            search: search
        };
    };
    LocationSensor.prototype.render = function () {
        return renderProp_1.default(this.props, this.state);
    };
    return LocationSensor;
}(react_1.Component));
exports.LocationSensor = LocationSensor;
exports.withLocation = faccToHoc_1.default(LocationSensor, 'location');
//# sourceMappingURL=index.js.map