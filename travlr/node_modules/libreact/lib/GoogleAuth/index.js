"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var util_1 = require("../util");
var gapi_1 = require("./gapi");
exports.createGoogleAuthContext = function (options) {
    var context = React.createContext({});
    var googleAuthPromise = gapi_1.getGapiAuthInstance(options);
    var googleAuthInstance;
    var isSignedInListener;
    var currentUserListener;
    googleAuthPromise.then(function (instance) {
        googleAuthInstance = instance;
        googleAuthInstance.isSignedIn.listen(function (isSignedIn) {
            if (isSignedInListener)
                isSignedInListener(isSignedIn);
        });
        googleAuthInstance.currentUser.listen(function (user) {
            if (currentUserListener)
                currentUserListener(user);
        });
    }, console.error);
    var Provider = (function (_super) {
        tslib_1.__extends(Provider, _super);
        function Provider() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.signIn = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!googleAuthInstance) return [3, 2];
                            return [4, googleAuthPromise];
                        case 1:
                            googleAuthInstance = _a.sent();
                            _a.label = 2;
                        case 2: return [4, googleAuthInstance.signIn()];
                        case 3: return [2, _a.sent()];
                    }
                });
            }); };
            _this.signOut = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!googleAuthInstance) return [3, 2];
                            return [4, googleAuthPromise];
                        case 1:
                            googleAuthInstance = _a.sent();
                            _a.label = 2;
                        case 2: return [4, googleAuthInstance.signOut()];
                        case 3:
                            _a.sent();
                            return [2];
                    }
                });
            }); };
            _this.onIsSignedIn = function (isSignedIn) {
                if (isSignedIn) {
                }
                else {
                    _this.setState({
                        isSignedIn: false,
                        user: null,
                    });
                }
            };
            _this.onCurrentUser = function (user) {
                if (user.isSignedIn()) {
                    _this.setState({
                        isSignedIn: true,
                        user: user
                    });
                }
            };
            _this.state = {
                loading: !googleAuthInstance,
                signIn: _this.signIn,
                signOut: _this.signOut,
                user: null,
                isSignedIn: false,
            };
            return _this;
        }
        Provider.prototype.componentDidMount = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var isSignedIn;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!googleAuthInstance) return [3, 2];
                            return [4, googleAuthPromise];
                        case 1:
                            googleAuthInstance = _a.sent();
                            _a.label = 2;
                        case 2:
                            isSignedInListener = this.onIsSignedIn;
                            currentUserListener = this.onCurrentUser;
                            isSignedIn = googleAuthInstance.isSignedIn.get();
                            this.setState({
                                loading: false,
                                isSignedIn: isSignedIn,
                                user: isSignedIn ? googleAuthInstance.currentUser.get() : null,
                            });
                            return [2];
                    }
                });
            });
        };
        Provider.prototype.componentWillUnmount = function () {
            if (isSignedInListener === this.onIsSignedIn)
                isSignedInListener = undefined;
            if (currentUserListener === this.onCurrentUser)
                currentUserListener = undefined;
        };
        Provider.prototype.render = function () {
            return util_1.h(context.Provider, { value: this.state }, this.props.children);
        };
        return Provider;
    }(React.Component));
    return {
        Provider: Provider,
        Consumer: context.Consumer,
    };
};
//# sourceMappingURL=index.js.map