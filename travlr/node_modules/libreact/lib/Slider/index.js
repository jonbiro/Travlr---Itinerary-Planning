"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var util_1 = require("../util");
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var throttle_debounce_1 = require("throttle-debounce");
var Slider = (function (_super) {
    tslib_1.__extends(Slider, _super);
    function Slider(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.LEFT = 'left';
        _this.WIDTH = 'width';
        _this.CLIENT_X = 'clientX';
        _this.el = null;
        _this.mounted = false;
        _this.ref = function (originalRef) { return function (el) {
            _this.el = el;
            (originalRef || util_1.noop)(el);
        }; };
        _this.onMouseDown = function (originalMouseDown) { return function (event) {
            (originalMouseDown || util_1.noop)(event);
            _this.startScrubbing();
            _this.onMouseMove(event);
        }; };
        _this.onTouchStart = function (originalTouchStart) { return function (event) {
            (originalTouchStart || util_1.noop)(event);
            _this.startScrubbing();
            _this.onTouchMove(event);
        }; };
        _this.stopScrubbing = function () {
            if (_this.state.isSliding && _this.mounted) {
                (_this.props.onScrubStop || util_1.noop)();
                _this.setState({ isSliding: false });
                _this.unbindEvents();
            }
        };
        _this.onMouseMove = function (event) {
            _this.onScrub(event[_this.CLIENT_X]);
        };
        _this.onMouseUp = _this.stopScrubbing;
        _this.onTouchMove = function (event) {
            _this.onScrub(event.changedTouches[0][_this.CLIENT_X]);
        };
        _this.onTouchEnd = _this.stopScrubbing;
        _this.onScrub = throttle_debounce_1.throttle(_this.props.throttle, false, function (clientX) {
            if (!_this.mounted || !_this.el) {
                return;
            }
            var _a = _this.el.getBoundingClientRect(), _b = _this.LEFT, pos = _a[_b], _c = _this.WIDTH, length = _a[_c];
            if (!length) {
                return;
            }
            var value = (clientX - pos) / length;
            if (value > 1) {
                value = 1;
            }
            else if (value < 0) {
                value = 0;
            }
            if (_this.props.reverse) {
                value = 1 - value;
            }
            _this.setState({
                value: value,
                pos: clientX - pos,
                length: length
            });
            (_this.props.onScrub || util_1.noop)(value);
        });
        if (props.vertical) {
            _this.LEFT = 'top';
            _this.WIDTH = 'height';
            _this.CLIENT_X = 'clientY';
        }
        _this.state = {
            isSliding: false,
            value: _this.props.value
        };
        return _this;
    }
    Slider.prototype.componentDidMount = function () {
        this.mounted = true;
    };
    Slider.prototype.componentWillUnmount = function () {
        this.mounted = false;
        this.unbindEvents();
    };
    Slider.prototype.startScrubbing = function () {
        if (!this.state.isSliding && this.mounted) {
            (this.props.onScrubStart || util_1.noop)();
            this.setState({ isSliding: true });
            this.bindEvents();
        }
    };
    Slider.prototype.bindEvents = function () {
        util_1.on(document, 'mousemove', this.onMouseMove);
        util_1.on(document, 'mouseup', this.onMouseUp);
        util_1.on(document, 'touchmove', this.onTouchMove);
        util_1.on(document, 'touchend', this.onTouchEnd);
    };
    Slider.prototype.unbindEvents = function () {
        util_1.off(document, 'mousemove', this.onMouseMove);
        util_1.off(document, 'mouseup', this.onMouseUp);
        util_1.off(document, 'touchmove', this.onTouchMove);
        util_1.off(document, 'touchend', this.onTouchEnd);
    };
    Slider.prototype.render = function () {
        var disabled = this.props.disabled;
        var element = renderProp_1.default(this.props, this.state);
        var props = {
            ref: this.ref(element.ref)
        };
        if (!disabled) {
            props.onMouseDown = this.onMouseDown(element.props.onMouseDown);
            props.onTouchStart = this.onTouchStart(element.props.onTouchStart);
        }
        return React.cloneElement(element, props);
    };
    Slider.defaultProps = {
        disabled: false,
        reverse: false,
        vertical: false,
        throttle: 50,
        value: 0
    };
    return Slider;
}(React.Component));
exports.Slider = Slider;
//# sourceMappingURL=index.js.map