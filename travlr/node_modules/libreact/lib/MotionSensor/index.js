"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var SyncSensor_1 = require("../SyncSensor");
var util_1 = require("../util");
var faccToHoc_1 = tslib_1.__importDefault(require("../util/faccToHoc"));
var DEFAULT = {
    acceleration: {
        x: null,
        y: null,
        z: null
    },
    accelerationIncludingGravity: {
        x: null,
        y: null,
        z: null
    },
    rotationRate: {
        alpha: null,
        beta: null,
        gamma: null
    },
    interval: 16
};
var addListener = function (handler) { return util_1.on(window, 'devicemotion', handler); };
var removeListener = function (handler) { return util_1.off(window, 'devicemotion', handler); };
var onEvent = function (event) {
    var acceleration = event.acceleration, accelerationIncludingGravity = event.accelerationIncludingGravity, rotationRate = event.rotationRate, interval = event.interval;
    return {
        acceleration: {
            x: acceleration.x,
            y: acceleration.y,
            z: acceleration.z
        },
        accelerationIncludingGravity: {
            x: accelerationIncludingGravity.x,
            y: accelerationIncludingGravity.y,
            z: accelerationIncludingGravity.z
        },
        rotationRate: {
            alpha: rotationRate.alpha,
            beta: rotationRate.beta,
            gamma: rotationRate.gamma,
        },
        interval: interval
    };
};
var getInitialState = function () {
    return DEFAULT;
};
var MotionSensor = (function (_super) {
    tslib_1.__extends(MotionSensor, _super);
    function MotionSensor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.initial = getInitialState();
        return _this;
    }
    MotionSensor.prototype.render = function () {
        return util_1.h(SyncSensor_1.SyncSensor, {
            children: this.props.children,
            initial: this.initial,
            addListener: addListener,
            removeListener: removeListener,
            onEvent: onEvent
        });
    };
    return MotionSensor;
}(react_1.Component));
exports.MotionSensor = MotionSensor;
exports.withMotion = faccToHoc_1.default(MotionSensor, 'motion');
//# sourceMappingURL=index.js.map