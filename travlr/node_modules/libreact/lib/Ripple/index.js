"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var nano_1 = require("../nano");
var util_1 = require("../util");
var rippleAnimationName = nano_1.keyframes({
    to: {
        transform: 'scale(12)',
        opacity: 0
    }
});
var className = nano_1.rule({
    borderRadius: '50%',
    height: '100px',
    width: '100px',
    position: 'absolute',
    transform: 'scale(0)',
    opacity: 1,
    pointerEvents: 'none',
});
var Ripple = (function (_super) {
    tslib_1.__extends(Ripple, _super);
    function Ripple() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.el = null;
        _this.elRipple = null;
        _this.ref = function (originalRef) { return function (el) {
            _this.el = el;
            (originalRef || util_1.noop)(el);
        }; };
        _this.refRipple = function (el) {
            _this.elRipple = el;
        };
        _this.onMouseDown = function (originalMouseDown) { return function (event) {
            if (!_this.elRipple) {
                return;
            }
            var _a = _this.el.getBoundingClientRect(), left = _a.left, top = _a.top;
            var posX = left + window.scrollX;
            var posY = top + window.scrollY;
            var elX = event.pageX - posX;
            var elY = event.pageY - posY;
            var style = _this.elRipple.style;
            style.removeProperty('animation');
            style.top = (elY - 50) + 'px';
            style.left = (elX - 50) + 'px';
            setTimeout(function () {
                style.setProperty('animation', rippleAnimationName + " " + _this.props.ms + "ms linear");
            }, 35);
            (originalMouseDown || util_1.noop)(event);
        }; };
        return _this;
    }
    Ripple.prototype.render = function () {
        var _a = this.props, children = _a.children, color = _a.color;
        var element = React.Children.only(children);
        var ripple = util_1.h('div', {
            className: className,
            style: {
                background: color,
            },
            ref: this.refRipple
        });
        var style = element.props.style || {};
        style = Object.assign({}, style, {
            overflow: 'hidden',
            position: 'relative'
        });
        var innerChildren = React.Children.toArray(element.props.children);
        innerChildren.push(ripple);
        return React.cloneElement.apply(React, [element, tslib_1.__assign({}, element.props, { style: style, ref: this.ref(element.props.ref), onMouseDown: this.onMouseDown(element.props.onMouseDown) })].concat(innerChildren));
    };
    Ripple.defaultProps = {
        color: 'rgba(0,0,0,.2)',
        ms: 400
    };
    return Ripple;
}(React.Component));
exports.Ripple = Ripple;
exports.withRipple = function (tag, rippleProps) {
    if (rippleProps === void 0) { rippleProps = null; }
    return function (props) { return util_1.h(Ripple, rippleProps, util_1.h(tag, props)); };
};
//# sourceMappingURL=index.js.map