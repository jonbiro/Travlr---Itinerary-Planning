"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var renderProp_1 = tslib_1.__importDefault(require("../util/renderProp"));
var faccToHoc_1 = tslib_1.__importDefault(require("../util/faccToHoc"));
var GeoLocationSensor = (function (_super) {
    tslib_1.__extends(GeoLocationSensor, _super);
    function GeoLocationSensor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mounted = false;
        _this.watchId = 0;
        _this.state = {
            accuracy: null,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            latitude: null,
            longitude: null,
            speed: null,
            timestamp: Date.now()
        };
        _this.onEvent = function (event) {
            if (_this.mounted) {
                _this.setState({
                    accuracy: event.coords.accuracy,
                    altitude: event.coords.altitude,
                    altitudeAccuracy: event.coords.altitudeAccuracy,
                    heading: event.coords.heading,
                    latitude: event.coords.latitude,
                    longitude: event.coords.longitude,
                    speed: event.coords.speed,
                    timestamp: event.timestamp
                });
            }
        };
        return _this;
    }
    GeoLocationSensor.prototype.componentDidMount = function () {
        this.mounted = true;
        navigator.geolocation.getCurrentPosition(this.onEvent);
        this.watchId = navigator.geolocation.watchPosition(this.onEvent);
    };
    GeoLocationSensor.prototype.componentWillUnmount = function () {
        this.mounted = false;
        navigator.geolocation.clearWatch(this.watchId);
    };
    GeoLocationSensor.prototype.render = function () {
        return renderProp_1.default(this.props, this.state);
    };
    return GeoLocationSensor;
}(react_1.Component));
exports.GeoLocationSensor = GeoLocationSensor;
exports.withGeoLocation = faccToHoc_1.default(GeoLocationSensor, 'geoLocation');
//# sourceMappingURL=index.js.map