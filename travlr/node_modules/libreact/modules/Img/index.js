import { Component } from 'react';
import { h, isClient, noop } from '../util';
export class Img extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            state: 0
        };
        this.onLoad = (originalOnLoad) => (event) => {
            this.setState({ state: 1 });
            (originalOnLoad || noop)(event);
        };
        this.onError = (originalOnError) => (event) => {
            this.setState({ state: 2 });
            (originalOnError || noop)(event);
        };
    }
    render() {
        const { renderLoad, renderError, onLoad, onError, $ref, ...rest } = this.props;
        if (!isClient) {
            return h('img', rest);
        }
        rest.onLoad = this.onLoad(onLoad);
        rest.onError = this.onError(onError);
        if ($ref) {
            rest.ref = $ref;
        }
        const { state } = this.state;
        const img = h('img', rest);
        switch (state) {
            case 0:
                return renderLoad ? renderLoad(img, this.props, state) : img;
            case 1:
                return img;
            case 2:
                return renderError || renderLoad ?
                    (renderError || renderLoad)(img, this.props, state) :
                    img;
        }
    }
}
