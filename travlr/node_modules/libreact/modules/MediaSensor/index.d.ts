import { Component } from 'react';
export interface IMediaSensorProps {
    matches?: boolean;
    query: string;
    children?: React.ReactElement<any> | ((match: boolean) => React.ReactElement<any>);
    render?: React.ReactElement<any> | ((match: boolean) => React.ReactElement<any>);
    comp?: React.StatelessComponent<IMediaSensorState> | React.ComponentClass<IMediaSensorState>;
    component?: React.StatelessComponent<IMediaSensorState> | React.ComponentClass<IMediaSensorState>;
}
export interface IMediaSensorState {
    matches: boolean;
}
export declare class MediaSensor extends Component<IMediaSensorProps, IMediaSensorState> {
    mql: MediaQueryList;
    state: IMediaSensorState;
    mounted: boolean;
    constructor(props: any, context: any);
    componentDidMount(): void;
    componentDidUpdate(props: any): void;
    componentWillUnmount(): void;
    onMediaChange: (mediaQueryList: any) => void;
    updateQuery(): void;
    removeListener(): void;
    render(): any;
}
export declare const withMedia: any;
