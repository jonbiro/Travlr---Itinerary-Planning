import { Component } from 'react';
export interface INetworkSensorProps {
    children?: (INetworkState: any) => React.ReactElement<any>;
}
export interface INetworkSensorState {
    online?: boolean;
    since?: Date;
    downlink?: number;
    downlinkMax?: number;
    effectiveType?: string;
    rtt?: number;
    type?: string;
}
export declare class NetworkSensor extends Component<INetworkSensorProps, INetworkSensorState> {
    state: INetworkSensorState;
    readonly connection: any;
    constructor(props: any, context: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    onOnline: () => void;
    onOffline: () => void;
    getConnState(): {
        downlink?: undefined;
        downlinkMax?: undefined;
        effectiveType?: undefined;
        type?: undefined;
        rtt?: undefined;
    } | {
        downlink: any;
        downlinkMax: any;
        effectiveType: any;
        type: any;
        rtt: any;
    };
    onNetConnChange: () => void;
    render(): any;
}
export declare const withNetwork: any;
