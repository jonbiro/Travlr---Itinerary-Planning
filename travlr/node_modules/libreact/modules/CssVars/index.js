import { PureComponent, Component } from 'react';
import { Provider, Consumer } from '../context';
import { h, isClient } from '../util';
import renderProp from '../util/renderProp';
import faccToHoc from '../util/faccToHoc';
const supportsCssVariables = isClient && window.CSS && CSS.supports && CSS.supports('--a', '0');
let style;
if (supportsCssVariables) {
    style = document.documentElement.style;
}
export class CssVarsProvider extends PureComponent {
    constructor() {
        super(...arguments);
        this.vars = {};
    }
    componentWillMount() {
        this.setVars(this.props.vars);
    }
    componentWillUpdate(newProps) {
        const oldVars = this.props.vars;
        const newVars = newProps.vars;
        const shouldRerender = this.setVars(newVars, oldVars) || this.removeVars(oldVars, newVars);
        if (shouldRerender) {
            this.vars = { ...this.vars };
        }
    }
    componentWillUnmount() {
        this.removeVars(this.vars);
    }
    setVars(vars, oldVars = {}) {
        if (!supportsCssVariables) {
            this.vars = vars;
            return true;
        }
        let shouldRerender = false;
        const { ns } = this.props;
        for (const name in vars) {
            let doUpdate = false;
            if (oldVars[name]) {
                if (vars[name] !== oldVars[name]) {
                    doUpdate = true;
                }
            }
            else {
                shouldRerender = true;
                doUpdate = true;
            }
            if (doUpdate) {
                const varName = `---${ns}libreact-${name}`;
                this.vars[name] = `var(${varName})`;
                style.setProperty(varName, String(vars[name]));
            }
        }
        return shouldRerender;
    }
    removeVars(oldVars, vars = {}) {
        let shouldRerender = false;
        const { ns } = this.props;
        for (const name in oldVars) {
            if (vars[name] === undefined) {
                const varName = `---${ns}libreact-${name}`;
                delete this.vars[name];
                style.removeProperty(varName);
                shouldRerender = true;
            }
        }
        return shouldRerender;
    }
    render() {
        return h(Provider, {
            name: 'css-vars/' + this.props.ns,
            value: this.vars
        }, this.props.children);
    }
}
CssVarsProvider.defaultProps = {
    ns: ''
};
export class CssVars extends Component {
    render() {
        return h(Consumer, { name: 'css-vars/' + this.props.ns }, (vars) => {
            return renderProp(this.props, vars);
        });
    }
}
CssVars.defaultProps = {
    ns: ''
};
export const withCssVars = faccToHoc(CssVars, 'vars');
