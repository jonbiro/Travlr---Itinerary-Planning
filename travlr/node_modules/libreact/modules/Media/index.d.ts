import * as React from 'react';
export declare type TMediaEvent<M> = (event: any, media?: M, state?: IMediaState) => void;
export declare type TMediaRenderProp = (media: IMedia, state: IMediaState) => React.ReactElement<any>;
export interface IMedia {
    [s: string]: any;
    play(): any;
    pause(): any;
    seek(time: number): any;
    volume(volume: number): any;
    mute(): any;
    unmute(): any;
}
export interface IMediaProps<M> extends React.AllHTMLAttributes<any> {
    src: string;
    tag?: 'audio' | 'video';
    children?: TMediaRenderProp;
    render?: TMediaRenderProp;
    autoPlay?: boolean;
    loop?: boolean;
    muted?: boolean;
    preload?: 'none' | 'metadata' | 'auto';
    volume?: number;
    noJs?: React.ReactElement<any>;
    onMount?: TMediaEvent<M>;
    onUnmount?: TMediaEvent<M>;
    onChange?: TMediaEvent<M>;
    onAbort?: TMediaEvent<M>;
    onCanPlay?: TMediaEvent<M>;
    onCanPlayThrough?: TMediaEvent<M>;
    onDurationChange?: TMediaEvent<M>;
    onEmptied?: TMediaEvent<M>;
    onEncrypted?: TMediaEvent<M>;
    onEnded?: TMediaEvent<M>;
    onError?: TMediaEvent<M>;
    onLoadedData?: TMediaEvent<M>;
    onLoadedMetadata?: TMediaEvent<M>;
    onLoadStart?: TMediaEvent<M>;
    onPause?: TMediaEvent<M>;
    onPlay?: TMediaEvent<M>;
    onPlaying?: TMediaEvent<M>;
    onProgress?: TMediaEvent<M>;
    onRateChange?: TMediaEvent<M>;
    onSeeked?: TMediaEvent<M>;
    onSeeking?: TMediaEvent<M>;
    onStalled?: TMediaEvent<M>;
    onSuspend?: TMediaEvent<M>;
    onTimeUpdate?: TMediaEvent<M>;
    onVolumeChange?: TMediaEvent<M>;
    onWaiting?: TMediaEvent<M>;
}
export interface IMediaState {
    buffered?: any[];
    duration?: number;
    isPlaying?: boolean;
    muted?: boolean;
    time?: number;
    volume?: number;
    canPlay?: boolean;
}
export declare class Media<P extends IMediaProps<M>, S extends IMediaState, M extends IMedia> extends React.Component<P, S> implements IMedia {
    tag: 'video' | 'audio';
    props: P;
    el: HTMLMediaElement;
    state: S;
    ref: (el: any) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: any): void;
    lockPlay: boolean;
    play: () => void;
    pause: () => void;
    seek: (time: number) => void;
    volume: (volume: any) => void;
    mute: () => void;
    unmute: () => void;
    event: (name: string) => (event: any) => void;
    change(nextState: any): void;
    onPlay: (event: any) => void;
    onPause: (event: any) => void;
    onVolumeChange: (event: any) => void;
    onDurationChange: (event: any) => void;
    onTimeUpdate: (event: any) => void;
    onProgress: (event: any) => void;
    onCanPlay: (event: any) => void;
    render(): React.DetailedReactHTMLElement<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
}
