import * as React from 'react';
export interface ISliderProps {
    children?: React.ReactElement<any> | ((state: ISliderState) => React.ReactElement<any>);
    render?: (state: ISliderState) => React.ReactElement<any>;
    disabled?: boolean;
    onScrub?: (pos: number) => void;
    onScrubStart?: () => void;
    onScrubStop?: () => void;
    reverse?: boolean;
    value?: number;
    vertical?: boolean;
    throttle?: number;
}
export interface ISliderState {
    isSliding?: boolean;
    value?: number;
    pos?: number;
    length?: number;
}
export declare class Slider extends React.Component<ISliderProps, ISliderState> {
    static defaultProps: {
        disabled: boolean;
        reverse: boolean;
        vertical: boolean;
        throttle: number;
        value: number;
    };
    LEFT: string;
    WIDTH: string;
    CLIENT_X: string;
    el: HTMLElement;
    mounted: boolean;
    state: any;
    constructor(props: any, context: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    ref: (originalRef: any) => (el: any) => void;
    onMouseDown: (originalMouseDown: any) => (event: any) => void;
    onTouchStart: (originalTouchStart: any) => (event: any) => void;
    startScrubbing(): void;
    stopScrubbing: () => void;
    bindEvents(): void;
    unbindEvents(): void;
    onMouseMove: (event: any) => void;
    onMouseUp: () => void;
    onTouchMove: (event: any) => void;
    onTouchEnd: () => void;
    onScrub: any;
    render(): React.DetailedReactHTMLElement<any, HTMLElement>;
}
