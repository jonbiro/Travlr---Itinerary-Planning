import { Component } from 'react';
import { render, createEnhancer } from 'react-universal-interface';
export class Render extends Component {
    constructor() {
        super(...arguments);
        this.timeout = null;
        this.frame = null;
        this.state = {
            start: 0,
            now: 0,
            value: 0
        };
        this.start = () => {
            const now = Date.now();
            this.setState({
                start: now,
                now,
                value: 0
            }, () => {
                this.frame = requestAnimationFrame(this.onFrame);
            });
        };
        this.onFrame = () => {
            const now = Date.now();
            const value = Math.min((now - this.state.start) / this.props.ms, 1);
            let onState;
            if (value < 1) {
                onState = () => {
                    this.frame = requestAnimationFrame(this.onFrame);
                };
            }
            this.setState({
                now,
                value
            }, onState);
        };
    }
    componentDidMount() {
        const { delay } = this.props;
        if (delay) {
            this.timeout = setTimeout(this.start, delay);
        }
        else {
            this.start();
        }
    }
    componentWillUnmount() {
        cancelAnimationFrame(this.frame);
        clearTimeout(this.timeout);
    }
    render() {
        return render(this.props, this.state);
    }
}
Render.defaultProps = {
    ms: 300
};
export const withRender = createEnhancer(Render, 'render');
