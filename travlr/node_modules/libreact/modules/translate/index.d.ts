import { Component } from 'react';
import { Consumer } from '../context';
export interface ITranslationsProps {
    map: {
        [key: string]: string | ((...args: any[]) => string);
    };
    ns?: string;
}
export interface ITranslationsState {
}
export declare class Translations extends Component<ITranslationsProps, ITranslationsState> {
    render(): import("react").ComponentElement<{
        name: string;
        value: {
            [key: string]: string | ((...args: any[]) => string);
        };
    }, Component<{
        name: string;
        value: {
            [key: string]: string | ((...args: any[]) => string);
        };
    }, any, any>>;
}
export interface ITranslateProps {
    ns?: string;
}
export interface ITranslateState {
}
export declare class Translate extends Component<ITranslateProps, ITranslateState> {
    render(): import("react").ComponentElement<Readonly<{
        children?: import("react").ReactNode;
    }> & Readonly<import("../context").IConsumerProps>, Consumer>;
}
export declare const T: typeof Translate;
export declare const withT: any;
