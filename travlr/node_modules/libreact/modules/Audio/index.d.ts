import * as React from 'react';
import { Media } from '../Media';
export declare type TAudioEvent = (event: any, Audio: any, IAudioState: any) => void;
export interface IAudioProps {
    src: string;
    children?: (...args: any[]) => React.ReactElement<any>;
    autoPlay?: boolean;
    loop?: boolean;
    muted?: boolean;
    preload?: 'none' | 'metadata' | 'auto';
    volume?: number;
    noJs?: React.ReactElement<any>;
    onAbort?: TAudioEvent;
    onCanPlay?: TAudioEvent;
    onCanPlayThrough?: TAudioEvent;
    onDurationChange?: TAudioEvent;
    onEmptied?: TAudioEvent;
    onEncrypted?: TAudioEvent;
    onEnded?: TAudioEvent;
    onError?: TAudioEvent;
    onLoadedData?: TAudioEvent;
    onLoadedMetadata?: TAudioEvent;
    onLoadStart?: TAudioEvent;
    onPause?: TAudioEvent;
    onPlay?: TAudioEvent;
    onPlaying?: TAudioEvent;
    onProgress?: TAudioEvent;
    onRateChange?: TAudioEvent;
    onSeeked?: TAudioEvent;
    onSeeking?: TAudioEvent;
    onStalled?: TAudioEvent;
    onSuspend?: TAudioEvent;
    onTimeUpdate?: TAudioEvent;
    onVolumeChange?: TAudioEvent;
    onWaiting?: TAudioEvent;
}
export interface IAudioState {
    time?: number;
    duration?: number;
    isPlaying?: boolean;
    muted?: boolean;
    volume?: number;
}
export declare class Audio extends Media<IAudioProps, IAudioState, Audio> {
    tag: any;
    render(): any;
}
