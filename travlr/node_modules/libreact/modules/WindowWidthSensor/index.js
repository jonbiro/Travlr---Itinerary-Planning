import { Component } from 'react';
import { isClient } from '../util';
import faccToHoc from '../util/faccToHoc';
import renderProp from '../util/renderProp';
import { noop, on, off } from '../util';
import { throttle } from 'throttle-debounce';
export class WindowWidthSensor extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            width: isClient ? window.innerWidth : this.props.width,
        };
        this.onResize = throttle(this.props.throttle, false, () => {
            const width = window.innerWidth;
            if (width !== this.state.width) {
                const state = { width };
                this.setState(state);
                this.props.onWidth(state);
            }
        });
    }
    componentDidMount() {
        on(window, 'resize', this.onResize);
    }
    componentWillUnmount() {
        off(window, 'resize', this.onResize);
    }
    render() {
        return renderProp(this.props, this.state);
    }
}
WindowWidthSensor.defaultProps = {
    width: 1920,
    throttle: 25,
    onWidth: noop,
};
export const withWindowWidth = faccToHoc(WindowWidthSensor, 'windowWidth');
