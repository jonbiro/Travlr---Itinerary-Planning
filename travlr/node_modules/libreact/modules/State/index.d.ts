import { Component } from 'react';
export interface IStateProps {
    children?: (state: any, setState?: any) => React.ReactElement<any>;
    render?: (state: any, setState?: any) => React.ReactElement<any>;
    init: object;
    onChange?: (state: any) => void;
    onMount?: (state: any) => void;
    onUnmount?: (state: any) => void;
}
export interface IStateState {
}
export declare class State extends Component<IStateProps, IStateState> {
    static defaultProps: {
        onChange: (...args: any[]) => any;
        onMount: (...args: any[]) => any;
        onUnmount: (...args: any[]) => any;
    };
    state: IStateState;
    constructor(props: any, context: any);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): any;
}
export declare const withState: (Comp: any, name?: string, init?: {}) => (props: any) => import("react").ComponentElement<any, State>;
