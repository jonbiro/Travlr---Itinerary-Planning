import * as React from 'react';
import { h } from '../util';
import { getGapiAuthInstance } from './gapi';
export const createGoogleAuthContext = (options) => {
    const context = React.createContext({});
    const googleAuthPromise = getGapiAuthInstance(options);
    let googleAuthInstance;
    let isSignedInListener;
    let currentUserListener;
    googleAuthPromise.then((instance) => {
        googleAuthInstance = instance;
        googleAuthInstance.isSignedIn.listen((isSignedIn) => {
            if (isSignedInListener)
                isSignedInListener(isSignedIn);
        });
        googleAuthInstance.currentUser.listen((user) => {
            if (currentUserListener)
                currentUserListener(user);
        });
    }, console.error);
    class Provider extends React.Component {
        constructor() {
            super(...arguments);
            this.signIn = async () => {
                if (!googleAuthInstance) {
                    googleAuthInstance = await googleAuthPromise;
                }
                return await googleAuthInstance.signIn();
            };
            this.signOut = async () => {
                if (!googleAuthInstance) {
                    googleAuthInstance = await googleAuthPromise;
                }
                await googleAuthInstance.signOut();
            };
            this.onIsSignedIn = (isSignedIn) => {
                if (isSignedIn) {
                }
                else {
                    this.setState({
                        isSignedIn: false,
                        user: null,
                    });
                }
            };
            this.onCurrentUser = (user) => {
                if (user.isSignedIn()) {
                    this.setState({
                        isSignedIn: true,
                        user
                    });
                }
            };
            this.state = {
                loading: !googleAuthInstance,
                signIn: this.signIn,
                signOut: this.signOut,
                user: null,
                isSignedIn: false,
            };
        }
        async componentDidMount() {
            if (!googleAuthInstance) {
                googleAuthInstance = await googleAuthPromise;
            }
            isSignedInListener = this.onIsSignedIn;
            currentUserListener = this.onCurrentUser;
            const isSignedIn = googleAuthInstance.isSignedIn.get();
            this.setState({
                loading: false,
                isSignedIn,
                user: isSignedIn ? googleAuthInstance.currentUser.get() : null,
            });
        }
        componentWillUnmount() {
            if (isSignedInListener === this.onIsSignedIn)
                isSignedInListener = undefined;
            if (currentUserListener === this.onCurrentUser)
                currentUserListener = undefined;
        }
        render() {
            return h(context.Provider, { value: this.state }, this.props.children);
        }
    }
    return {
        Provider: Provider,
        Consumer: context.Consumer,
    };
};
