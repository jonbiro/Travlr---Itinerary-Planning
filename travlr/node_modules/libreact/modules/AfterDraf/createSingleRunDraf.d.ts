import * as React from 'react';
export interface IAfterDrafState {
    ready: boolean;
}
export declare const createSingleRunDraf: (() => {
    new (props: any, context: any): {
        frame: any;
        state: IAfterDrafState;
        componentDidMount(): void;
        componentWillUnmount(): void;
        render(): {};
        setState<K extends "ready">(state: IAfterDrafState | ((prevState: Readonly<IAfterDrafState>, props: Readonly<{}>) => IAfterDrafState | Pick<IAfterDrafState, K>) | Pick<IAfterDrafState, K>, callback?: () => void): void;
        forceUpdate(callBack?: () => void): void;
        readonly props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<{}>, nextState: Readonly<IAfterDrafState>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<{}>, prevState: Readonly<IAfterDrafState>): any;
        componentDidUpdate?(prevProps: Readonly<{}>, prevState: Readonly<IAfterDrafState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{}>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<IAfterDrafState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<{}>, nextState: Readonly<IAfterDrafState>, nextContext: any): void;
    };
}) | (() => (props: any) => any);
export default createSingleRunDraf;
