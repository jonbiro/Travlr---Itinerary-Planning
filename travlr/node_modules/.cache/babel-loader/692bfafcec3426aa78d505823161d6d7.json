{"ast":null,"code":"import _classCallCheck from \"/Users/yoni/Development/travlrbackend2/travlr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yoni/Development/travlrbackend2/travlr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yoni/Development/travlrbackend2/travlr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yoni/Development/travlrbackend2/travlr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yoni/Development/travlrbackend2/travlr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yoni/Development/travlrbackend2/travlr/src/BestComponents/TripCardMainCityContainer.js\";\nimport React, { Component } from \"react\";\nimport \"../App.css\";\nimport { ROOT_URL } from \"../Config\";\nimport { withRouter } from \"react-router-dom\";\nimport { Icon, Input, Button } from \"semantic-ui-react\";\nimport CityCard from \"./CityCard\"; // import Login from \"./Login\";\n// import CityShow from \"./CityShow\";\n\nvar TripCardMainCityContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TripCardMainCityContainer, _Component);\n\n  function TripCardMainCityContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TripCardMainCityContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TripCardMainCityContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      city_name: \"\",\n      cities: [],\n      city_id: null\n    };\n\n    _this.fetchCities = function () {\n      fetch(\"/api/v1/cities/\", {\n        method: \"GET\",\n        headers: {\n          // Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \".concat(localStorage.getItem(\"accessToken\"))\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        var cities = !!json && json.filter(function (city) {\n          return city.trip_id === _this.props.trip.id;\n        });\n\n        _this.setState({\n          cities: cities\n        });\n      });\n    };\n\n    _this.createCity = function () {\n      var data = {\n        name: _this.state.city_name,\n        trip_id: _this.props.trip.id\n      };\n      fetch(\"/api/v1/cities\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \".concat(localStorage.getItem(\"accessToken\"))\n        },\n        body: JSON.stringify(data)\n      }).then(function (res) {\n        return res.json();\n      }).then(function () {\n        _this.fetchCities();\n\n        _this.setState({\n          city_name: \"\"\n        });\n      });\n    };\n\n    _this.changeHandler = function (e) {\n      // console.log(e.target.value);\n      _this.setState({\n        city_name: e.target.value\n      });\n    };\n\n    _this.onSelect = function (city) {\n      // console.log(\"setnewtrip\", trip);\n      localStorage.setItem(\"city_name\", city.id);\n    };\n\n    _this.deleteHandler = function (city) {\n      fetch(\"http://localhost:3005/api/v1/cities/\".concat(city.id), {\n        method: \"delete\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \".concat(localStorage.getItem(\"accessToken\"))\n        }\n      }).then(_this.fetchCities);\n    };\n\n    _this.showCities = function () {\n      // let showEvent= this.state.trips.map(atrip => {\n      //   return <Trip key={atrip.id} trip={atrip} onSelect={this.onSelect} deleteHandler={this.deleteHandler}/>;\n      // });\n      // return showEvent\n      return _this.state.cities.map(function (city) {\n        return React.createElement(CityCard, {\n          key: city.id,\n          city: city,\n          onSelect: _this.onSelect,\n          deleteHandler: _this.deleteHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TripCardMainCityContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchCities();\n    }\n  }, {\n    key: \"render\",\n    // checkAuthCityCard = routerProps => {\n    // \tdebugger\n    // \tlet paramId = routerProps.match.params.id;\n    // \tlet city = this.state.cities.find(\n    // \t\tcityObj => cityObj.id === parseInt(paramId)\n    // \t);\n    // \tconsole.log(\"this \" + city.id);\n    //\n    // \tif (localStorage.getItem(\"accessToken\")) {\n    // \t\treturn <CityShow city={city} />;\n    // \t} else {\n    // \t\treturn <Login />;\n    // \t}\n    // };\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n        className: \"bigh1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, this.props.trip.destination), React.createElement(Input, {\n        type: \"text\",\n        placeholder: \"Add City Name\",\n        value: this.state.city_name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        onChange: this.changeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.createCity,\n        icon: true,\n        color: \"green\",\n        labelPosition: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"plus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), \"Add City for Trip to \", this.props.trip.destination)), React.createElement(\"div\", {\n        className: \"ui centered cards\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, this.showCities())))));\n    }\n  }]);\n\n  return TripCardMainCityContainer;\n}(Component);\n\nexport default withRouter(TripCardMainCityContainer);","map":{"version":3,"sources":["/Users/yoni/Development/travlrbackend2/travlr/src/BestComponents/TripCardMainCityContainer.js"],"names":["React","Component","ROOT_URL","withRouter","Icon","Input","Button","CityCard","TripCardMainCityContainer","state","city_name","cities","city_id","fetchCities","fetch","method","headers","Authorization","localStorage","getItem","then","res","json","filter","city","trip_id","props","trip","id","setState","createCity","data","name","body","JSON","stringify","changeHandler","e","target","value","onSelect","setItem","deleteHandler","showCities","map","destination"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\nimport { ROOT_URL } from \"../Config\";\nimport { withRouter} from \"react-router-dom\";\nimport { Icon, Input, Button } from \"semantic-ui-react\";\nimport CityCard from \"./CityCard\";\n// import Login from \"./Login\";\n// import CityShow from \"./CityShow\";\n\nclass TripCardMainCityContainer extends Component {\n  state = {\n    city_name: \"\",\n    cities: [],\n    city_id: null\n  };\n\n  componentDidMount() {\n    this.fetchCities();\n  }\n\n  fetchCities = () => {\n    fetch(`/api/v1/cities/`, {\n      method: \"GET\",\n      headers: {\n        // Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n      }\n    })\n      .then(res => res.json())\n      .then(json => {\n        \tlet cities = !!json && json.filter(city =>city.trip_id === this.props.trip.id)\n          this.setState({\n            cities\n          });\n\n      });\n  };\n\n  createCity = () => {\n    let data = {\n      name: this.state.city_name,\n      trip_id: this.props.trip.id\n    };\n    fetch(\"/api/v1/cities\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n      },\n      body: JSON.stringify(data)\n    })\n      .then(res => res.json())\n      .then(() => {\n        this.fetchCities();\n        this.setState({\n          city_name: \"\"\n        });\n      });\n  };\n\n  // addTrip = trip => {\n  //   if (this.state.trips) {\n  //     this.setState({ trips: [trip, ...this.state.trips] });\n  //   }\n  // };\n  // editTrip = newTrip => {\n  //   let tripsArray = this.state.trips.map(t => {\n  //     if (t.id === newTrip.id) {\n  //       return newTrip;\n  //     }\n  //     return t;\n  //   });\n  //   this.setState({ trips: tripsArray });\n  // };\n  //\n  // deleteTrip = id => {\n  //   let trips = this.state.trips.filter(t => t.id !== id);\n  //   this.setState({ trips: trips });\n  // };\n\n  // findTrip = id => {\n  //   return this.state.trips.filter(t => t.id === id);\n  // };\n\n  // changeTripId = id => {\n  //   this.setState({ trip_id: id });\n  // };\n\n  changeHandler = e => {\n    // console.log(e.target.value);\n    this.setState({\n      city_name: e.target.value\n    });\n  };\n\tonSelect = city => {\n\t\t// console.log(\"setnewtrip\", trip);\n\t\tlocalStorage.setItem(\"city_name\", city.id);\n\t};\n\tdeleteHandler = city => {\n\t\tfetch(`http://localhost:3005/api/v1/cities/${city.id}`, {\n\t\t\tmethod: \"delete\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: `Bearer ${localStorage.getItem(\"accessToken\")}`\n\t\t\t}\n\t\t}).then(this.fetchCities);\n\t};\n\tshowCities = () => {\n\t\t// let showEvent= this.state.trips.map(atrip => {\n\t\t//   return <Trip key={atrip.id} trip={atrip} onSelect={this.onSelect} deleteHandler={this.deleteHandler}/>;\n\t\t// });\n\t\t// return showEvent\n\t\treturn this.state.cities.map(city => {\n\t\t\treturn (\n\t\t\t\t<CityCard\n\t\t\t\t\tkey={city.id}\n\t\t\t\t\tcity={city}\n\t\t\t\t\tonSelect={this.onSelect}\n\t\t\t\t\tdeleteHandler={this.deleteHandler}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t};\n\n\t// checkAuthCityCard = routerProps => {\n\t// \tdebugger\n\t// \tlet paramId = routerProps.match.params.id;\n\t// \tlet city = this.state.cities.find(\n\t// \t\tcityObj => cityObj.id === parseInt(paramId)\n\t// \t);\n\t// \tconsole.log(\"this \" + city.id);\n\t//\n\t// \tif (localStorage.getItem(\"accessToken\")) {\n\t// \t\treturn <CityShow city={city} />;\n\t// \t} else {\n\t// \t\treturn <Login />;\n\t// \t}\n\t// };\n\n  render() {\n    return (\n    \t<div>\n\t    {/*<Switch>*/}\n\t\t    {/*<Route*/}\n\t\t\t    {/*path={\"/cities/:id\"}*/}\n\t\t\t    {/*render={routerProps => (*/}\n\t\t\t\t    {/*<>*/}\n\t\t\t\t\t    {/*{this.state.cities.length > 0*/}\n\t\t\t\t\t\t    {/*? this.checkAuthCityCard(routerProps)*/}\n\t\t\t\t\t\t    {/*: \"Loading\"}*/}\n\t\t\t\t    {/*</>*/}\n\t\t\t    {/*)}*/}\n\t\t    {/*/></Switch>*/}\n        <>\n          <div className=\"App\">\n            <br />\n            <>\n              <h1 className='bigh1'>{this.props.trip.destination}</h1>\n\n              <Input\n                type=\"text\"\n                placeholder= \"Add City Name\"\n                value={this.state.city_name}\n              >\n                <input onChange={this.changeHandler} />\n                <Button\n                  onClick={this.createCity}\n                  icon\n                  color=\"green\"\n                  labelPosition=\"right\"\n                >\n                  <Icon name=\"plus\" />\n                  Add City for Trip to {this.props.trip.destination}\n                </Button>\n              </Input>\n\t            <div className='ui centered cards' >{this.showCities()}</div>\n            </>\n          </div>\n\n      </>\n\t    </div>\n    );\n  }\n}\n\nexport default withRouter(TripCardMainCityContainer);\n"]},"metadata":{},"sourceType":"module"}