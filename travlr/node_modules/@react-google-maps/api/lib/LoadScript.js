var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as React from 'react';
import { Component, createRef } from 'react';
import { injectScript } from './utils/injectscript';
import { preventGoogleFonts } from './utils/prevent-google-fonts';
import { isBrowser } from './utils/isbrowser';
var cleaningUp = false;
var LoadScript = /** @class */ (function (_super) {
    __extends(LoadScript, _super);
    function LoadScript(props) {
        var _this = _super.call(this, props) || this;
        _this.isCleaningUp = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        if (!cleaningUp) {
                            resolve();
                        }
                        else {
                            if (isBrowser) {
                                var timer_1 = window.setInterval(function () {
                                    if (!cleaningUp) {
                                        window.clearInterval(timer_1);
                                        resolve();
                                    }
                                }, 1);
                            }
                        }
                    })];
            });
        }); };
        _this.cleanup = function () {
            cleaningUp = true;
            var script = document.getElementById(_this.props.id);
            if (script) {
                script.parentNode.removeChild(script);
            }
            Array.prototype.slice
                .call(document.getElementsByTagName('script'))
                .filter(function (script) { return script.src.includes('maps.googleapis'); })
                .forEach(function (script) {
                script.parentNode.removeChild(script);
            });
            Array.prototype.slice
                .call(document.getElementsByTagName('link'))
                .filter(function (link) {
                return link.href === 'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Google+Sans';
            })
                .forEach(function (link) {
                link.parentNode.removeChild(link);
            });
            Array.prototype.slice
                .call(document.getElementsByTagName('style'))
                .filter(function (style) { return style.innerText.includes('.gm-'); })
                .forEach(function (style) {
                style.parentNode.removeChild(style);
            });
        };
        _this.injectScript = function () {
            var _a = _this.props, id = _a.id, googleMapsApiKey = _a.googleMapsApiKey, language = _a.language, region = _a.region, version = _a.version, libraries = _a.libraries, preventGoogleFontsLoading = _a.preventGoogleFontsLoading;
            if (preventGoogleFontsLoading) {
                preventGoogleFonts();
            }
            injectScript({
                id: id,
                url: "https://maps.googleapis.com/maps/api/js?v=" + version + "&key=" + googleMapsApiKey + "&language=" + language + "&region=" + region + (libraries ? "&libraries=" + libraries.join(',') : '')
            })
                .then(function () {
                _this.props.onLoad();
                _this.setState(function () { return ({
                    loaded: true
                }); });
            })
                .catch(function (err) {
                _this.props.onError(err);
                throw new Error("\nThere has been an Error with loading Google Maps API script, please check that you provided all required props to <LoadScript />\nProps you have provided:\ngoogleMapsApiKey: " + _this.props.googleMapsApiKey + "\nlanguage: " + _this.props.language + "\nregion: " + _this.props.region + "\nversion: " + _this.props.version + "\nlibraries: " + (_this.props.libraries || []).join(',') + "\nOtherwise it is a Network issues.\n");
            });
        };
        _this.state = {
            loaded: false
        };
        _this.check = createRef();
        return _this;
    }
    LoadScript.prototype.componentDidMount = function () {
        if (isBrowser) {
            // @ts-ignore
            if (window.google && !cleaningUp) {
                console.error('google api is already presented');
                return;
            }
            this.isCleaningUp().then(this.injectScript);
        }
    };
    LoadScript.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        if (isBrowser && prevProps.language !== this.props.language) {
            this.cleanup();
            // TODO: refactor to use gDSFP
            // eslint-disable-next-line react/no-did-update-set-state
            this.setState(function () { return ({
                loaded: false
            }); }, function () {
                //@ts-ignore
                delete window.google;
                _this.injectScript();
            });
        }
    };
    LoadScript.prototype.componentWillUnmount = function () {
        var _this = this;
        if (isBrowser) {
            this.cleanup();
            setTimeout(function () {
                if (!_this.check.current) {
                    //@ts-ignore
                    delete window.google;
                    cleaningUp = false;
                }
            }, 1);
            this.props.onUnmount();
        }
    };
    LoadScript.prototype.render = function () {
        return (React.createElement("div", { ref: this.check }, this.state.loaded ? this.props.children : this.props.loadingElement));
    };
    LoadScript.defaultProps = {
        onLoad: function () { },
        onError: function () { },
        onUnmount: function () { },
        loadingElement: React.createElement("div", null, "Loading..."),
        preventGoogleFontsLoading: false,
        libraries: []
    };
    return LoadScript;
}(Component));
export default LoadScript;
//# sourceMappingURL=LoadScript.js.map