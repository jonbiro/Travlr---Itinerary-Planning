/// <reference types="googlemaps" />
import { CSSProperties, PureComponent } from 'react';
import { Bounds, LatLng } from './types';
interface GoogleMapState {
    map: google.maps.Map;
}
interface GoogleMapProps {
    id: string;
    reuseSameInstance?: boolean;
    mapContainerStyle?: CSSProperties;
    mapContainerClassName?: string;
    options?: google.maps.MapOptions;
    extraMapTypes?: google.maps.MapType[];
    center?: LatLng;
    clickableIcons?: boolean;
    heading?: number;
    mapTypeId?: string;
    streetView?: google.maps.StreetViewPanorama;
    tilt?: number;
    zoom?: number;
    onClick?: (e: MouseEvent) => void;
    onDblClick?: (e: MouseEvent) => void;
    onDrag?: () => void;
    onDragEnd?: () => void;
    onDragStart?: () => void;
    onMapTypeIdChanged?: () => void;
    onMouseMove?: (e: MouseEvent) => void;
    onMouseOut?: (e: MouseEvent) => void;
    onMouseOver?: (e: MouseEvent) => void;
    onRightClick?: (e: MouseEvent) => void;
    onTilesLoaded?: () => void;
    onBoundsChanged?: () => void;
    onCenterChanged?: () => void;
    onHeadingChanged?: () => void;
    onIdle?: () => void;
    onProjectionChanged?: () => void;
    onResize?: () => void;
    onTiltChanged?: () => void;
    onZoomChanged?: () => void;
    onLoad?: (map: google.maps.Map) => void | Promise<void>;
}
export declare class GoogleMap extends PureComponent<GoogleMapProps, GoogleMapState> {
    static defaultProps: GoogleMapProps;
    state: GoogleMapState;
    registeredEvents: google.maps.MapsEventListener[];
    mapRef: HTMLElement;
    getInstance: () => google.maps.Map;
    componentDidMount: () => void;
    componentDidUpdate: (prevProps: GoogleMapProps) => void;
    componentWillUnmount: () => void;
    getRef: (ref: HTMLElement) => void;
    render: () => JSX.Element;
    fitBounds: (bounds: Bounds, padding?: number | google.maps.Padding) => void;
    panBy: (x: number, y: number) => void;
    panTo: (latLng: LatLng) => void;
    panToBounds: (latLngBounds: Bounds, padding?: number | google.maps.Padding) => void;
    getBounds: () => google.maps.LatLngBounds;
    getCenter: () => google.maps.LatLng;
    getClickableIcons: () => any;
    getDiv: () => Element;
    getHeading: () => number;
    getMapTypeId: () => string | google.maps.MapTypeId;
    getProjection: () => google.maps.Projection;
    getStreetView: () => google.maps.StreetViewPanorama;
    getTilt: () => number;
    getZoom: () => number;
}
export default GoogleMap;
