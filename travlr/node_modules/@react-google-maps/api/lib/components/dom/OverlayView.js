var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/* global google */
import { PureComponent, Children } from 'react';
import { createPortal } from 'react-dom';
//@ts-ignore
import invariant from 'invariant'; // Do wee really need this dependency?
import { unregisterEvents, applyUpdatersToPropsAndRegisterEvents } from '../../utils/helper';
import MapContext from '../../map-context';
import { getOffsetOverride, getLayoutStyles } from './dom-helper';
var eventMap = {};
var updaterMap = {};
var OverlayView = /** @class */ (function (_super) {
    __extends(OverlayView, _super);
    function OverlayView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.registeredEvents = [];
        _this.state = {
            overlayView: null
        };
        _this.componentDidMount = function () {
            var overlayView = new google.maps.OverlayView();
            // You must implement three methods: onAdd(), draw(), and onRemove().
            overlayView.onAdd = _this.onAdd;
            overlayView.draw = _this.draw;
            overlayView.onRemove = _this.onRemove;
            overlayView.setMap(_this.context);
            // You must call setMap() with a valid Map object to trigger the call to
            // the onAdd() method and setMap(null) in order to trigger the onRemove() method.
            _this.setState(function () { return ({
                overlayView: overlayView
            }); }, function () {
                _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                    updaterMap: updaterMap,
                    eventMap: eventMap,
                    prevProps: {},
                    nextProps: _this.props,
                    instance: _this.state.overlayView
                });
            });
        };
        _this.componentDidUpdate = function (prevProps) {
            unregisterEvents(_this.registeredEvents);
            _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                updaterMap: updaterMap,
                eventMap: eventMap,
                prevProps: prevProps,
                nextProps: _this.props,
                instance: _this.state.overlayView
            });
        };
        _this.componentWillUnmount = function () {
            unregisterEvents(_this.registeredEvents);
            _this.state.overlayView && _this.state.overlayView.setMap(null);
        };
        _this.render = function () {
            return _this.containerElement
                ? createPortal(Children.only(_this.props.children), _this.containerElement)
                : null;
        };
        _this.preventMapHitsAndGesturesFrom = function (element) {
            //@ts-ignore
            return _this.state.overlayView.preventMapHitsAndGesturesFrom(element);
        };
        //@ts-ignore
        _this.preventMapHitsFrom = function (element) { return _this.state.overlayView.preventMapHitsFrom(element); };
        _this.draw = function () {
            var mapPaneName = _this.props.mapPaneName;
            invariant(!!mapPaneName, "OverlayView requires props.mapPaneName but got %s", mapPaneName);
            var overlayView = _this.state.overlayView;
            if (!overlayView) {
                return;
            }
            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapPanes
            var mapPanes = overlayView.getPanes();
            if (!mapPanes) {
                return;
            }
            mapPanes[mapPaneName].appendChild(_this.containerElement);
            _this.onPositionElement();
            _this.forceUpdate();
        };
        _this.getMap = function () { return _this.state.overlayView.getMap(); };
        _this.getPanes = function () { return _this.state.overlayView.getPanes(); };
        _this.getProjection = function () { return _this.state.overlayView.getProjection(); };
        _this.onAdd = function () {
            _this.containerElement = document.createElement('div');
            _this.containerElement.style.position = 'absolute';
        };
        _this.onPositionElement = function () {
            var mapCanvasProjection = _this.state.overlayView.getProjection();
            var offset = __assign({ x: 0, y: 0 }, getOffsetOverride(_this.containerElement, _this.props.getPixelPositionOffset));
            var layoutStyles = getLayoutStyles(mapCanvasProjection, offset, _this.props.bounds, _this.props.position);
            Object.assign(_this.containerElement.style, layoutStyles);
        };
        _this.onRemove = function () {
            if (_this.containerElement) {
                _this.containerElement.parentNode.removeChild(_this.containerElement);
            }
            _this.containerElement = null;
        };
        return _this;
    }
    OverlayView.FLOAT_PANE = "floatPane";
    OverlayView.MAP_PANE = "mapPane";
    OverlayView.MARKER_LAYER = "markerLayer";
    OverlayView.OVERLAY_LAYER = "overlayLayer";
    OverlayView.OVERLAY_MOUSE_TARGET = "overlayMouseTarget";
    OverlayView.contextType = MapContext;
    return OverlayView;
}(PureComponent));
export { OverlayView };
export default OverlayView;
//# sourceMappingURL=OverlayView.js.map