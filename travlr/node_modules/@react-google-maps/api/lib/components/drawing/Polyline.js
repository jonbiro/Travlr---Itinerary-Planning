var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/* global google */
import { PureComponent } from 'react';
import { unregisterEvents, applyUpdatersToPropsAndRegisterEvents } from '../../utils/helper';
import MapContext from '../../map-context';
var eventMap = {
    onClick: 'click',
    onDblClick: 'dblclick',
    onDrag: 'drag',
    onDragEnd: 'dragend',
    onDragStart: 'dragstart',
    onMouseDown: 'mousedown',
    onMouseMove: 'mousemove',
    onMouseOut: 'mouseout',
    onMouseOver: 'mouseover',
    onMouseUp: 'mouseup',
    onRightClick: 'rightclick'
};
var updaterMap = {
    draggable: function (instance, draggable) {
        instance.setDraggable(draggable);
    },
    editable: function (instance, editable) {
        instance.setEditable(editable);
    },
    map: function (instance, map) {
        instance.setMap(map);
    },
    options: function (instance, options) {
        instance.setOptions(options);
    },
    path: function (instance, path) {
        instance.setPath(path);
    },
    visible: function (instance, visible) {
        instance.setVisible(visible);
    }
};
var Polyline = /** @class */ (function (_super) {
    __extends(Polyline, _super);
    function Polyline() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.registeredEvents = [];
        _this.state = {
            polyline: null
        };
        _this.componentDidMount = function () {
            var polyline = new google.maps.Polyline(__assign({}, _this.props.options, { map: _this.context }));
            _this.setState(function () { return ({
                polyline: polyline
            }); }, function () {
                _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                    updaterMap: updaterMap,
                    eventMap: eventMap,
                    prevProps: {},
                    nextProps: _this.props,
                    instance: _this.state.polyline
                });
            });
        };
        _this.componentDidUpdate = function (prevProps) {
            unregisterEvents(_this.registeredEvents);
            _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                updaterMap: updaterMap,
                eventMap: eventMap,
                prevProps: prevProps,
                nextProps: _this.props,
                instance: _this.state.polyline
            });
        };
        _this.componentWillUnmount = function () {
            unregisterEvents(_this.registeredEvents);
            _this.state.polyline && _this.state.polyline.setMap(null);
        };
        _this.render = function () { return null; };
        _this.getDraggable = function () { return _this.state.polyline.getDraggable(); };
        _this.getEditable = function () { return _this.state.polyline.getEditable(); };
        _this.getPath = function () { return _this.state.polyline.getPath(); };
        _this.getVisible = function () { return _this.state.polyline.getVisible(); };
        _this.getMap = function () { return _this.state.polyline.getMap(); };
        return _this;
    }
    Polyline.contextType = MapContext;
    return Polyline;
}(PureComponent));
export { Polyline };
export default Polyline;
//# sourceMappingURL=Polyline.js.map