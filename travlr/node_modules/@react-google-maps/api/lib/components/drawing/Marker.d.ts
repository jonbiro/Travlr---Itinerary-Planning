/// <reference types="googlemaps" />
import { PureComponent } from 'react';
import { LatLng } from '../../types';
interface MarkerState {
    marker?: google.maps.Marker;
}
interface MarkerProps {
    options?: google.maps.MapOptions;
    animation?: google.maps.Animation;
    clickable?: boolean;
    cursor?: string;
    draggable?: string;
    icon?: string | google.maps.Icon | google.maps.Symbol;
    label?: string | google.maps.MarkerLabel;
    opacity?: number;
    position: LatLng;
    shape?: google.maps.MarkerShape;
    title?: string;
    visible?: boolean;
    zIndex?: number;
    onClick?: (e: MouseEvent) => void;
    onClickableChanged?: () => void;
    onCursorChanged?: () => void;
    onAnimationChanged?: () => void;
    onDblClick?: (e: MouseEvent) => void;
    onDrag?: (e: MouseEvent) => void;
    onDragEnd?: (e: MouseEvent) => void;
    onDraggableChanged?: () => void;
    onDragStart?: (e: MouseEvent) => void;
    onFlatChanged?: () => void;
    onIconChanged?: () => void;
    onMouseDown?: (e: MouseEvent) => void;
    onMouseOut?: (e: MouseEvent) => void;
    onMouseOver?: (e: MouseEvent) => void;
    onMouseUp?: (e: MouseEvent) => void;
    onPositionChanged?: () => void;
    onRightClick?: (e: MouseEvent) => void;
    onShapeChanged?: () => void;
    onTitleChanged?: () => void;
    onVisibleChanged?: () => void;
    onZindexChanged?: () => void;
}
export declare class Marker extends PureComponent<MarkerProps, MarkerState> {
    static contextType: import("react").Context<google.maps.Map>;
    registeredEvents: google.maps.MapsEventListener[];
    state: MarkerState;
    componentDidMount: () => void;
    componentDidUpdate: (prevProps: MarkerProps) => void;
    componentWillUnmount: () => void;
    render: () => {};
    getAnimation: () => google.maps.Animation;
    getClickable: () => boolean;
    getCursor: () => string;
    getDraggable: () => boolean;
    getIcon: () => string | google.maps.Icon | google.maps.Symbol;
    getLabel: () => google.maps.MarkerLabel;
    getMap: () => google.maps.Map | google.maps.StreetViewPanorama;
    getOpacity: () => number;
    getPosition: () => google.maps.LatLng;
    getShape: () => google.maps.MarkerShape;
    getTitle: () => string;
    getVisible: () => boolean;
    getZIndex: () => number;
}
export default Marker;
