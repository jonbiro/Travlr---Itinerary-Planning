var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* global google */
import { PureComponent, Children } from 'react';
import { createPortal } from 'react-dom';
import { unregisterEvents, applyUpdatersToPropsAndRegisterEvents } from '../../utils/helper';
import MapContext from '../../map-context';
// @ts-ignore
import invariant from 'invariant';
var eventMap = {
    onCloseClick: 'closeclick',
    onContentChanged: 'content_changed',
    onDomReady: 'domready',
    onPositionChanged: 'position_changed',
    onZindexChanged: 'zindex_changed'
};
var updaterMap = {
    options: function (instance, options) {
        instance.setOptions(options);
    },
    position: function (instance, position) {
        instance.setPosition(position);
    },
    zIndex: function (instance, zIndex) {
        instance.setZIndex(zIndex);
    }
};
var InfoWindow = /** @class */ (function (_super) {
    __extends(InfoWindow, _super);
    function InfoWindow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.registeredEvents = [];
        _this.state = {
            infoWindow: null
        };
        _this.componentDidMount = function () {
            var infoWindow = new google.maps.InfoWindow(_this.props.options);
            _this.containerElement = document.createElement('div');
            _this.setState(function () { return ({
                infoWindow: infoWindow
            }); }, function () {
                _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                    updaterMap: updaterMap,
                    eventMap: eventMap,
                    prevProps: {},
                    nextProps: _this.props,
                    instance: _this.state.infoWindow
                });
                _this.state.infoWindow.setContent(_this.containerElement);
                _this.open(_this.state.infoWindow, _this.props.anchor);
            });
        };
        _this.componentWillUnmount = function () {
            unregisterEvents(_this.registeredEvents);
        };
        _this.render = function () {
            return _this.containerElement
                ? createPortal(Children.only(_this.props.children), _this.containerElement)
                : null;
        };
        _this.open = function (infoWindow, anchor) {
            if (anchor) {
                infoWindow.open(_this.context, anchor);
            }
            else if (infoWindow.getPosition()) {
                infoWindow.open(_this.context);
            }
            else {
                invariant(false, "You must provide either an anchor (typically render it inside a <Marker>) or a position props for <InfoWindow>.");
            }
        };
        _this.getContent = function () { return _this.state.infoWindow.getContent(); };
        _this.getPosition = function () { return _this.state.infoWindow.getPosition(); };
        _this.getZIndex = function () { return _this.state.infoWindow.getZIndex(); };
        return _this;
    }
    InfoWindow.prototype.componentDidUpdate = function (prevProps) {
        unregisterEvents(this.registeredEvents);
        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
            updaterMap: updaterMap,
            eventMap: eventMap,
            prevProps: prevProps,
            nextProps: this.props,
            instance: this.state.infoWindow
        });
    };
    InfoWindow.contextType = MapContext;
    return InfoWindow;
}(PureComponent));
export { InfoWindow };
export default InfoWindow;
//# sourceMappingURL=InfoWindow.js.map