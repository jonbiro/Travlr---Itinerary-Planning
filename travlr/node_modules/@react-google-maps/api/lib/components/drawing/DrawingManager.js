var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/* global google */
import { PureComponent } from 'react';
// @ts-ignore
import invariant from 'invariant';
import { unregisterEvents, applyUpdatersToPropsAndRegisterEvents } from '../../utils/helper';
import MapContext from '../../map-context';
var eventMap = {
    onCircleComplete: 'circlecomplete',
    onMarkerComplete: 'markercomplete',
    onOverlayComplete: 'overlaycomplete',
    ondrawingManagerComplete: 'drawingManagercomplete',
    onPolylineComplete: 'polylinecomplete',
    onRectangleComplete: 'rectanglecomplete'
};
var updaterMap = {
    drawingMode: function (instance, drawingMode) {
        instance.setDrawingMode(drawingMode);
    },
    options: function (instance, options) {
        instance.setOptions(options);
    }
};
var DrawingManager = /** @class */ (function (_super) {
    __extends(DrawingManager, _super);
    function DrawingManager(props) {
        var _this = _super.call(this, props) || this;
        _this.registeredEvents = [];
        _this.state = {
            drawingManager: null
        };
        _this.componentDidMount = function () {
            var drawingManager = new google.maps.drawing.DrawingManager(__assign({}, _this.props.options, { map: _this.context }));
            _this.setState(function () { return ({
                drawingManager: drawingManager
            }); }, function () {
                _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                    updaterMap: updaterMap,
                    eventMap: eventMap,
                    prevProps: {},
                    nextProps: _this.props,
                    instance: _this.state.drawingManager
                });
            });
        };
        _this.componentDidUpdate = function (prevProps) {
            unregisterEvents(_this.registeredEvents);
            _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                updaterMap: updaterMap,
                eventMap: eventMap,
                prevProps: prevProps,
                nextProps: _this.props,
                instance: _this.state.drawingManager
            });
        };
        _this.componentWillUnmount = function () {
            unregisterEvents(_this.registeredEvents);
            _this.state.drawingManager && _this.state.drawingManager.setMap(null);
        };
        _this.render = function () { return null; };
        _this.getDrawingMode = function () { return _this.state.drawingManager.getDrawingMode(); };
        _this.getMap = function () { return _this.state.drawingManager.getMap(); };
        invariant(google.maps.drawing, 'Did you include "libraries=drawing" in the URL?');
        return _this;
    }
    DrawingManager.contextType = MapContext;
    return DrawingManager;
}(PureComponent));
export { DrawingManager };
export default DrawingManager;
//# sourceMappingURL=DrawingManager.js.map