var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/* global google */
import { PureComponent } from 'react';
import { unregisterEvents, applyUpdatersToPropsAndRegisterEvents } from '../../utils/helper';
import MapContext from '../../map-context';
var eventMap = {
    onAnimationChanged: 'animation_changed',
    onClick: 'click',
    onClickableChanged: 'clickable_changed',
    onCursorChanged: 'cursor_changed',
    onDblClick: 'dblclick',
    onDrag: 'drag',
    onDragEnd: 'dragend',
    onDraggableChanged: 'draggable_changed',
    onDragStart: 'dragstart',
    onFlatChanged: 'flat_changed',
    onIconChanged: 'icon_changed',
    onMouseDown: 'mousedown',
    onMouseOut: 'mouseout',
    onMouseOver: 'mouseover',
    onMouseUp: 'mouseup',
    onPositionChanged: 'position_changed',
    onRightClick: 'rightclick',
    onShapeChanged: 'shape_changed',
    onTitleChanged: 'title_changed',
    onVisibleChanged: 'visible_changed',
    onZindexChanged: 'zindex_changed'
};
var updaterMap = {
    animation: function (instance, animation) {
        instance.setAnimation(animation);
    },
    clickable: function (instance, clickable) {
        instance.setClickable(clickable);
    },
    cursor: function (instance, cursor) {
        instance.setCursor(cursor);
    },
    draggable: function (instance, draggable) {
        instance.setDraggable(draggable);
    },
    icon: function (instance, icon) {
        instance.setIcon(icon);
    },
    label: function (instance, label) {
        instance.setLabel(label);
    },
    map: function (instance, map) {
        instance.setMap(map);
    },
    opacity: function (instance, opacity) {
        instance.setOpacity(opacity);
    },
    options: function (instance, options) {
        instance.setOptions(options);
    },
    position: function (instance, position) {
        instance.setPosition(position);
    },
    shape: function (instance, shape) {
        instance.setShape(shape);
    },
    title: function (instance, title) {
        instance.setTitle(title);
    },
    visible: function (instance, visible) {
        instance.setVisible(visible);
    },
    zIndex: function (instance, zIndex) {
        instance.setZIndex(zIndex);
    }
};
var Marker = /** @class */ (function (_super) {
    __extends(Marker, _super);
    function Marker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.registeredEvents = [];
        _this.state = {
            marker: null
        };
        _this.componentDidMount = function () {
            var marker = new google.maps.Marker(__assign({}, _this.props.options, { map: _this.context, position: _this.props.position }));
            _this.setState(function () { return ({
                marker: marker
            }); }, function () {
                _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                    updaterMap: updaterMap,
                    eventMap: eventMap,
                    prevProps: {},
                    nextProps: _this.props,
                    instance: _this.state.marker
                });
            });
        };
        _this.componentDidUpdate = function (prevProps) {
            unregisterEvents(_this.registeredEvents);
            _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                updaterMap: updaterMap,
                eventMap: eventMap,
                prevProps: prevProps,
                nextProps: _this.props,
                instance: _this.state.marker
            });
        };
        _this.componentWillUnmount = function () {
            unregisterEvents(_this.registeredEvents);
            _this.state.marker && _this.state.marker.setMap(null);
        };
        _this.render = function () { return (_this.props.children ? _this.props.children : null); };
        _this.getAnimation = function () { return _this.state.marker.getAnimation(); };
        _this.getClickable = function () { return _this.state.marker.getClickable(); };
        _this.getCursor = function () { return _this.state.marker.getCursor(); };
        _this.getDraggable = function () { return _this.state.marker.getDraggable(); };
        _this.getIcon = function () { return _this.state.marker.getIcon(); };
        _this.getLabel = function () { return _this.state.marker.getLabel(); };
        _this.getMap = function () { return _this.state.marker.getMap(); };
        _this.getOpacity = function () { return _this.state.marker.getOpacity(); };
        _this.getPosition = function () { return _this.state.marker.getPosition(); };
        _this.getShape = function () { return _this.state.marker.getShape(); };
        _this.getTitle = function () { return _this.state.marker.getTitle(); };
        _this.getVisible = function () { return _this.state.marker.getVisible(); };
        _this.getZIndex = function () { return _this.state.marker.getZIndex(); };
        return _this;
    }
    Marker.contextType = MapContext;
    return Marker;
}(PureComponent));
export { Marker };
export default Marker;
//# sourceMappingURL=Marker.js.map