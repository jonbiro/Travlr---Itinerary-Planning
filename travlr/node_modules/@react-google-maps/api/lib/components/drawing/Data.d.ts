/// <reference types="googlemaps" />
import { PureComponent } from 'react';
interface DataState {
    data?: google.maps.Data;
}
interface DataProps {
    options?: google.maps.Data.DataOptions;
    onAddFeature?: (e: google.maps.Data.AddFeatureEvent) => void;
    onClick?: (e: MouseEvent) => void;
    onDblClick?: (e: MouseEvent) => void;
    onMouseDown?: (e: MouseEvent) => void;
    onMouseOut?: (e: MouseEvent) => void;
    onMouseOver?: (e: MouseEvent) => void;
    onMouseUp?: (e: MouseEvent) => void;
    onRemoveFeature?: (e: google.maps.Data.RemoveFeatureEvent) => void;
    onRemoveProperty?: (e: google.maps.Data.RemovePropertyEvent) => void;
    onRightClick?: (e: MouseEvent) => void;
    onSetGeometry?: (e: google.maps.Data.SetGeometryEvent) => void;
    onSetProperty?: (e: google.maps.Data.SetPropertyEvent) => void;
}
export declare class Data extends PureComponent<DataProps, DataState> {
    static contextType: import("react").Context<google.maps.Map>;
    registeredEvents: google.maps.MapsEventListener[];
    state: DataState;
    componentDidMount: () => void;
    componentDidUpdate: (prevProps: DataProps) => void;
    componentWillUnmount: () => void;
    render: () => any;
    getControlPosition: () => google.maps.ControlPosition;
    getControls: () => google.maps.DrawingMode[];
    getDrawingMode: () => google.maps.DrawingMode;
    getFeatureById: (id: import("react").ReactText) => google.maps.Data.Feature;
    getMap: () => google.maps.Map;
    getStyle: () => google.maps.Data.StyleOptions | google.maps.Data.StylingFunction;
}
export default Data;
