var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/* global google */
import { PureComponent } from 'react';
// @ts-ignore
import warning from 'warning';
import { unregisterEvents, applyUpdatersToPropsAndRegisterEvents } from '../../utils/helper';
import MapContext from '../../map-context';
var eventMap = {
    onDblClick: 'dblclick',
    onClick: 'click'
};
var updaterMap = {
    opacity: function (instance, opacity) {
        instance.setOpacity(opacity);
    }
};
var GroundOverlay = /** @class */ (function (_super) {
    __extends(GroundOverlay, _super);
    function GroundOverlay(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.registeredEvents = [];
        _this.state = {
            groundOverlay: null
        };
        _this.componentDidMount = function () {
            var groundOverlay = new google.maps.GroundOverlay(_this.props.url, _this.props.bounds, __assign({}, _this.props.options, { map: _this.context }));
            _this.setState({ groundOverlay: groundOverlay });
        };
        _this.componentDidUpdate = function (prevProps) {
            unregisterEvents(_this.registeredEvents);
            _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                updaterMap: updaterMap,
                eventMap: eventMap,
                prevProps: prevProps,
                nextProps: _this.props,
                instance: _this.state.groundOverlay
            });
        };
        _this.componentWillUnmount = function () {
            if (_this.state.groundOverlay) {
                _this.state.groundOverlay.setMap(null);
            }
        };
        _this.render = function () { return null; };
        _this.getBounds = function () { return _this.state.groundOverlay.getBounds(); };
        _this.getMap = function () { return _this.state.groundOverlay.getMap(); };
        _this.getOpacity = function () { return _this.state.groundOverlay.getOpacity(); };
        _this.getUrl = function () { return _this.state.groundOverlay.getUrl(); };
        warning(!_this.props.url || !_this.props.bounds, "For GroundOveray, url and bounds are passed in to constructor and are immutable after instantiated. This is the behavior of Google Maps JavaScript API v3 ( See https://developers.google.com/maps/documentation/javascript/reference#GroundOverlay) Hence, use the corresponding two props provided by `react-google-maps-api`, url and bounds. In some cases, you'll need the GroundOverlay component to reflect the changes of url and bounds. You can leverage the React's key property to remount the component. Typically, just `key={url}` would serve your need. See https://github.com/tomchentw/react-google-maps/issues/655");
        return _this;
    }
    GroundOverlay.contextType = MapContext;
    return GroundOverlay;
}(PureComponent));
export { GroundOverlay };
export default GroundOverlay;
//# sourceMappingURL=GroundOverlay.js.map