/// <reference types="googlemaps" />
import * as React from 'react';
import { PureComponent, RefObject, Context } from 'react';
import { Bounds } from '../../types';
interface AutocompleteState {
    autocomplete?: google.maps.places.Autocomplete;
}
interface AutocompleteProps {
    bounds?: Bounds;
    restrictions?: google.maps.places.ComponentRestrictions;
    fields?: string[];
    options?: google.maps.places.AutocompleteOptions;
    types?: string[];
    onPlaceChanged?: () => void;
}
export declare class Autocomplete extends PureComponent<AutocompleteProps, AutocompleteState> {
    static contextType: React.Context<google.maps.Map>;
    registeredEvents: google.maps.MapsEventListener[];
    containerElement: RefObject<HTMLDivElement>;
    state: AutocompleteState;
    constructor(props: AutocompleteProps, context: Context<google.maps.Map>);
    componentDidMount: () => void;
    componentDidUpdate: (prevProps: AutocompleteProps) => void;
    componentWillUnmount: () => void;
    render: () => JSX.Element;
    getBounds: () => google.maps.LatLngBounds;
    getFields: () => any;
    getPlace: () => google.maps.places.PlaceResult;
}
export default Autocomplete;
