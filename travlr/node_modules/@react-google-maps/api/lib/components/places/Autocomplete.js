var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* global google */
import * as React from 'react';
import { PureComponent, Children, createRef } from 'react';
import { unregisterEvents, applyUpdatersToPropsAndRegisterEvents } from '../../utils/helper';
import MapContext from '../../map-context';
import * as invariant from 'invariant';
var eventMap = {
    onPlaceChanged: 'place_changed'
};
var updaterMap = {
    bounds: function (instance, bounds) {
        instance.setBounds(bounds);
    },
    restrictions: function (instance, restrictions) {
        instance.setComponentRestrictions(restrictions);
    },
    fields: function (instance, fields) {
        // TODO: add to @types/googlemaps
        // @ts-ignore
        instance.setFields(fields);
    },
    options: function (instance, options) {
        // TODO: add to @types/googlemaps
        // @ts-ignore
        instance.setOptions(options);
    },
    types: function (instance, types) {
        instance.setTypes(types);
    }
};
var Autocomplete = /** @class */ (function (_super) {
    __extends(Autocomplete, _super);
    function Autocomplete(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.registeredEvents = [];
        _this.state = {
            autocomplete: null
        };
        _this.componentDidMount = function () {
            var autocomplete = new google.maps.places.Autocomplete(_this.containerElement.current.querySelector('input'), _this.props.options);
            _this.setState(function () { return ({
                autocomplete: autocomplete
            }); });
        };
        _this.componentDidUpdate = function (prevProps) {
            unregisterEvents(_this.registeredEvents);
            _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                updaterMap: updaterMap,
                eventMap: eventMap,
                prevProps: prevProps,
                nextProps: _this.props,
                instance: _this.state.autocomplete
            });
        };
        _this.componentWillUnmount = function () {
            unregisterEvents(_this.registeredEvents);
        };
        _this.render = function () { return React.createElement("div", { ref: _this.containerElement }, Children.only(_this.props.children)); };
        _this.getBounds = function () { return _this.state.autocomplete.getBounds(); };
        // TODO: add to @types/googlemaps
        // @ts-ignore
        _this.getFields = function () { return _this.state.autocomplete.getFields(); };
        _this.getPlace = function () { return _this.state.autocomplete.getPlace(); };
        invariant(google.maps.places, 'Did you include "libraries=places" in the URL?');
        _this.containerElement = createRef();
        return _this;
    }
    Autocomplete.contextType = MapContext;
    return Autocomplete;
}(PureComponent));
export { Autocomplete };
export default Autocomplete;
//# sourceMappingURL=Autocomplete.js.map