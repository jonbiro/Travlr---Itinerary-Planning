var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
/* global google */
import * as React from 'react';
import { PureComponent } from 'react';
import MapContext from './map-context';
import { saveInstance, restoreInstance } from './utils/instance-persistance';
import { unregisterEvents, applyUpdatersToPropsAndRegisterEvents } from './utils/helper';
var eventMap = {
    onDblClick: 'dblclick',
    onDragEnd: 'dragend',
    onDragStart: 'dragstart',
    onMapTypeIdChanged: 'maptypeid_changed',
    onMouseMove: 'mousemove',
    onMouseOut: 'mouseout',
    onMouseOver: 'mouseover',
    onRightClick: 'rightclick',
    onTilesLoaded: 'tilesloaded',
    onBoundsChanged: 'bounds_changed',
    onCenterChanged: 'center_changed',
    onClick: 'click',
    onDrag: 'drag',
    onHeadingChanged: 'heading_changed',
    onIdle: 'idle',
    onProjectionChanged: 'projection_changed',
    onResize: 'resize',
    onTiltChanged: 'tilt_changed',
    onZoomChanged: 'zoom_changed'
};
var updaterMap = {
    extraMapTypes: function (map, extra) {
        extra.forEach(function (it, i) {
            map.mapTypes.set(String(i), it);
        });
    },
    center: function (map, center) {
        map.setCenter(center);
    },
    clickableIcons: function (map, clickable) {
        map.setClickableIcons(clickable);
    },
    heading: function (map, heading) {
        map.setHeading(heading);
    },
    mapTypeId: function (map, mapTypeId) {
        map.setMapTypeId(mapTypeId);
    },
    options: function (map, options) {
        map.setOptions(options);
    },
    streetView: function (map, streetView) {
        map.setStreetView(streetView);
    },
    tilt: function (map, tilt) {
        map.setTilt(tilt);
    },
    zoom: function (map, zoom) {
        map.setZoom(zoom);
    }
};
var GoogleMap = /** @class */ (function (_super) {
    __extends(GoogleMap, _super);
    function GoogleMap() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            map: null
        };
        _this.registeredEvents = [];
        _this.getInstance = function () {
            var _a = _this.props, reuseSameInstance = _a.reuseSameInstance, rest = __rest(_a, ["reuseSameInstance"]);
            var map = reuseSameInstance && restoreInstance(rest);
            return map || new google.maps.Map(_this.mapRef, _this.props.options);
        };
        _this.componentDidMount = function () {
            _this.setState(function () { return ({
                map: _this.getInstance()
            }); }, function () {
                _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                    updaterMap: updaterMap,
                    eventMap: eventMap,
                    prevProps: {},
                    nextProps: _this.props,
                    instance: _this.state.map
                });
                _this.props.onLoad(_this.state.map);
            });
        };
        _this.componentDidUpdate = function (prevProps) {
            unregisterEvents(_this.registeredEvents);
            _this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({
                updaterMap: updaterMap,
                eventMap: eventMap,
                prevProps: prevProps,
                nextProps: _this.props,
                instance: _this.state.map
            });
        };
        _this.componentWillUnmount = function () {
            var _a = _this.props, reuseSameInstance = _a.reuseSameInstance, id = _a.id;
            reuseSameInstance && saveInstance(id, _this.state.map);
            unregisterEvents(_this.registeredEvents);
        };
        _this.getRef = function (ref) {
            _this.mapRef = ref;
        };
        _this.render = function () {
            var _a = _this.props, id = _a.id, mapContainerStyle = _a.mapContainerStyle, mapContainerClassName = _a.mapContainerClassName, children = _a.children;
            var map = _this.state.map;
            return (React.createElement("div", { id: id, ref: _this.getRef, style: mapContainerStyle, className: mapContainerClassName },
                React.createElement(MapContext.Provider, { value: map }, map !== null ? children : null)));
        };
        _this.fitBounds = function (bounds, padding) {
            return _this.state.map.fitBounds(bounds, padding);
        };
        _this.panBy = function (x, y) { return _this.state.map.panBy(x, y); };
        _this.panTo = function (latLng) { return _this.state.map.panTo(latLng); };
        _this.panToBounds = function (latLngBounds, padding) {
            return _this.state.map.panToBounds(latLngBounds, padding);
        };
        _this.getBounds = function () { return _this.state.map.getBounds(); };
        _this.getCenter = function () { return _this.state.map.getCenter(); };
        // Function exists but it missing in typings
        //@ts-ignore Function exists but it missing in typings
        _this.getClickableIcons = function () { return _this.state.map.getClickableIcons(); };
        _this.getDiv = function () { return _this.state.map.getDiv(); };
        _this.getHeading = function () { return _this.state.map.getHeading(); };
        _this.getMapTypeId = function () { return _this.state.map.getMapTypeId(); };
        _this.getProjection = function () { return _this.state.map.getProjection(); };
        _this.getStreetView = function () { return _this.state.map.getStreetView(); };
        _this.getTilt = function () { return _this.state.map.getTilt(); };
        _this.getZoom = function () { return _this.state.map.getZoom(); };
        return _this;
    }
    GoogleMap.defaultProps = {
        id: 'defaultMapId',
        reuseSameInstance: false,
        onLoad: function (map) { }
    };
    return GoogleMap;
}(PureComponent));
export { GoogleMap };
export default GoogleMap;
//# sourceMappingURL=GoogleMap.js.map