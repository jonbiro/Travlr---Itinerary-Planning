import { Component, RefObject, ReactNode } from 'react';
interface LoadScriptState {
    loaded: boolean;
}
interface LoadScriptProps {
    id: string;
    googleMapsApiKey: string;
    language?: string;
    region?: string;
    version?: string;
    loadingElement?: ReactNode;
    onLoad?: () => void;
    onError?: (error: Error) => void;
    onUnmount?: () => void;
    libraries?: string[];
    preventGoogleFontsLoading?: boolean;
}
declare class LoadScript extends Component<LoadScriptProps, LoadScriptState> {
    static defaultProps: {
        onLoad: () => void;
        onError: () => void;
        onUnmount: () => void;
        loadingElement: JSX.Element;
        preventGoogleFontsLoading: boolean;
        libraries: any[];
    };
    check: RefObject<HTMLDivElement>;
    constructor(props: LoadScriptProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    componentWillUnmount(): void;
    isCleaningUp: () => Promise<{}>;
    cleanup: () => void;
    injectScript: () => void;
    render(): JSX.Element;
}
export default LoadScript;
